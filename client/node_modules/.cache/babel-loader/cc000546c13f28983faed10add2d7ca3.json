{"ast":null,"code":"import { __extends, __values } from 'tslib';\n/**\r\n * Thrown when one or more arguments passed to a method fail validation.\r\n */\n\nvar ArgumentsValidationError =\n/*#__PURE__*/\n\n/** @class */\nfunction (_super) {\n  __extends(ArgumentsValidationError, _super);\n\n  function ArgumentsValidationError(errors) {\n    var e_1, _a;\n\n    var _this = this;\n\n    var errorKeys = Object.keys(errors);\n    var message;\n\n    if (errorKeys.length === 0) {\n      message = 'One or more arguments failed validation.';\n    } else if (errorKeys.length === 1 && errors[errorKeys[0]].length === 1) {\n      message = \"Argument for '\" + errorKeys[0] + \"' failed validation.\\n\\n\" + errors[errorKeys[0]][0].message;\n    } else {\n      message = \"The following arguments failed validation: \" + errorKeys.join(', ') + \".\\n\\n\";\n      var msgList = [];\n\n      try {\n        for (var errorKeys_1 = __values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {\n          var param = errorKeys_1_1.value;\n          msgList.push(\"> For argument '\" + param + \"':\");\n\n          if (errors[param].length === 1) {\n            msgList.push(errors[param][0].message);\n          } else {\n            for (var index = 0; index < errors[param].length; index++) {\n              var error = errors[param][index];\n              msgList.push(\">> Issue #\" + (index + 1) + \"\\n\\n\" + error.message);\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      message += msgList.join('\\n\\n');\n    }\n\n    _this = _super.call(this, message) || this;\n    _this.errors = errors;\n    return _this;\n  }\n\n  return ArgumentsValidationError;\n}(Error);\n\nexport { ArgumentsValidationError };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/core/es/errors/argumentsValidationError.js"],"names":["__extends","__values","ArgumentsValidationError","_super","errors","e_1","_a","_this","errorKeys","Object","keys","message","length","join","msgList","errorKeys_1","errorKeys_1_1","next","done","param","value","push","index","error","e_1_1","return","call","Error"],"mappings":"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","sourcesContent":["import { __extends, __values } from 'tslib';\n/**\r\n * Thrown when one or more arguments passed to a method fail validation.\r\n */\n\nvar ArgumentsValidationError =\n/*#__PURE__*/\n\n/** @class */\nfunction (_super) {\n  __extends(ArgumentsValidationError, _super);\n\n  function ArgumentsValidationError(errors) {\n    var e_1, _a;\n\n    var _this = this;\n\n    var errorKeys = Object.keys(errors);\n    var message;\n\n    if (errorKeys.length === 0) {\n      message = 'One or more arguments failed validation.';\n    } else if (errorKeys.length === 1 && errors[errorKeys[0]].length === 1) {\n      message = \"Argument for '\" + errorKeys[0] + \"' failed validation.\\n\\n\" + errors[errorKeys[0]][0].message;\n    } else {\n      message = \"The following arguments failed validation: \" + errorKeys.join(', ') + \".\\n\\n\";\n      var msgList = [];\n\n      try {\n        for (var errorKeys_1 = __values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {\n          var param = errorKeys_1_1.value;\n          msgList.push(\"> For argument '\" + param + \"':\");\n\n          if (errors[param].length === 1) {\n            msgList.push(errors[param][0].message);\n          } else {\n            for (var index = 0; index < errors[param].length; index++) {\n              var error = errors[param][index];\n              msgList.push(\">> Issue #\" + (index + 1) + \"\\n\\n\" + error.message);\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      message += msgList.join('\\n\\n');\n    }\n\n    _this = _super.call(this, message) || this;\n    _this.errors = errors;\n    return _this;\n  }\n\n  return ArgumentsValidationError;\n}(Error);\n\nexport { ArgumentsValidationError };"]},"metadata":{},"sourceType":"module"}