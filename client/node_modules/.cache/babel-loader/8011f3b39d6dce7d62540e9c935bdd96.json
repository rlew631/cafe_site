{"ast":null,"code":"import { __spreadArray, __read, __assign, __awaiter, __generator } from 'tslib';\nimport isNode from 'detect-node';\nimport JSONBig from 'json-bigint';\nimport { deprecated, sanitizeUrl } from '../apiHelper.js';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError.js';\nimport { ResponseValidationError } from '../errors/responseValidationError.js';\nimport { validateAndUnmapXml, validateAndMap, validateAndMapXml } from '@apimatic/schema';\nimport { JSON_CONTENT_TYPE, setHeader, mergeHeaders, TEXT_CONTENT_TYPE, XML_CONTENT_TYPE, ACCEPT_HEADER, CONTENT_TYPE_HEADER, setHeaderIfNotSet, CONTENT_LENGTH_HEADER } from './httpHeaders.js';\nimport { callHttpInterceptors } from './httpInterceptor.js';\nimport { SkipEncode, pathTemplate } from './pathTemplate.js';\nimport { urlEncodeObject, filterFileWrapperFromKeyValuePairs, formDataEncodeObject } from './queryString.js';\nimport { prepareArgs } from './validate.js';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\nvar JSON = /*#__PURE__*/JSONBig({\n  useNativeBigInt: true\n});\n\nfunction skipEncode(value) {\n  return new SkipEncode(value);\n}\n\nvar DefaultRequestBuilder =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function DefaultRequestBuilder(_httpClient, _baseUrlProvider, _apiErrorFactory, _authenticationProvider, _httpMethod, _xmlSerializer, _path) {\n    this._httpClient = _httpClient;\n    this._baseUrlProvider = _baseUrlProvider;\n    this._apiErrorFactory = _apiErrorFactory;\n    this._authenticationProvider = _authenticationProvider;\n    this._httpMethod = _httpMethod;\n    this._xmlSerializer = _xmlSerializer;\n    this._path = _path;\n    this._headers = {};\n    this._query = [];\n    this._interceptors = [];\n    this._validateResponse = true;\n\n    this._addResponseValidator();\n\n    this._addAuthentication();\n\n    this.prepareArgs = prepareArgs.bind(this);\n  }\n\n  DefaultRequestBuilder.prototype.authenticate = function (params) {\n    this._authParams = params;\n  };\n\n  DefaultRequestBuilder.prototype.deprecated = function (methodName, message) {\n    deprecated(methodName, message);\n  };\n\n  DefaultRequestBuilder.prototype.appendTemplatePath = function (strings) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var pathSegment = pathTemplate.apply(void 0, __spreadArray([strings], __read(args)));\n    this.appendPath(pathSegment);\n  };\n\n  DefaultRequestBuilder.prototype.method = function (httpMethodName) {\n    this._httpMethod = httpMethodName;\n  };\n\n  DefaultRequestBuilder.prototype.baseUrl = function (arg) {\n    this._baseUrlArg = arg;\n  };\n\n  DefaultRequestBuilder.prototype.appendPath = function (path) {\n    this._path = this._path ? mergePath(this._path, path) : path;\n  };\n\n  DefaultRequestBuilder.prototype.acceptJson = function () {\n    this._accept = JSON_CONTENT_TYPE;\n  };\n\n  DefaultRequestBuilder.prototype.accept = function (acceptHeaderValue) {\n    this._accept = acceptHeaderValue;\n  };\n\n  DefaultRequestBuilder.prototype.contentType = function (contentTypeHeaderValue) {\n    this._contentType = contentTypeHeaderValue;\n  };\n\n  DefaultRequestBuilder.prototype.header = function (name, value) {\n    if (value === undefined) {\n      return;\n    }\n\n    setHeader(this._headers, name, value.toString());\n  };\n\n  DefaultRequestBuilder.prototype.headers = function (headersToMerge) {\n    mergeHeaders(this._headers, headersToMerge);\n  };\n\n  DefaultRequestBuilder.prototype.query = function (nameOrParameters, value) {\n    var _a;\n\n    if (nameOrParameters === null || nameOrParameters === undefined) {\n      return;\n    }\n\n    var queryString = typeof nameOrParameters === 'string' ? urlEncodeObject((_a = {}, _a[nameOrParameters] = value, _a)) : urlEncodeObject(nameOrParameters);\n\n    if (queryString) {\n      this._query.push(queryString);\n    }\n  };\n\n  DefaultRequestBuilder.prototype.text = function (body) {\n    this._body = body;\n\n    this._setContentTypeIfNotSet(TEXT_CONTENT_TYPE);\n  };\n\n  DefaultRequestBuilder.prototype.json = function (data) {\n    this._body = JSON.stringify(data);\n\n    this._setContentTypeIfNotSet(JSON_CONTENT_TYPE);\n  };\n\n  DefaultRequestBuilder.prototype.xml = function (argName, data, rootName, schema) {\n    var _a;\n\n    var mappingResult = validateAndUnmapXml(data, schema);\n\n    if (mappingResult.errors) {\n      throw new ArgumentsValidationError((_a = {}, _a[argName] = mappingResult.errors, _a));\n    }\n\n    this._body = this._xmlSerializer.xmlSerialize(rootName, mappingResult.result);\n\n    this._setContentTypeIfNotSet(XML_CONTENT_TYPE);\n  };\n\n  DefaultRequestBuilder.prototype.stream = function (file) {\n    this._stream = file;\n  };\n\n  DefaultRequestBuilder.prototype.form = function (parameters) {\n    this._form = filterFileWrapperFromKeyValuePairs(formDataEncodeObject(parameters));\n  };\n\n  DefaultRequestBuilder.prototype.formData = function (parameters) {\n    this._formData = formDataEncodeObject(parameters);\n  };\n\n  DefaultRequestBuilder.prototype.toRequest = function () {\n    var request = {\n      method: this._httpMethod,\n      url: mergePath(this._baseUrlProvider(this._baseUrlArg), this._path)\n    };\n\n    if (this._query.length > 0) {\n      var queryString = this._query.join('&');\n\n      request.url += (request.url.indexOf('?') === -1 ? '?' : '&') + queryString;\n    }\n\n    request.url = sanitizeUrl(request.url); // defensively copy headers\n\n    var headers = __assign({}, this._headers);\n\n    if (this._accept) {\n      setHeader(headers, ACCEPT_HEADER, this._accept);\n    }\n\n    if (this._contentType) {\n      setHeader(headers, CONTENT_TYPE_HEADER, this._contentType);\n    }\n\n    setHeader(headers, CONTENT_LENGTH_HEADER);\n    request.headers = headers;\n\n    if (this._body !== undefined) {\n      request.body = {\n        type: 'text',\n        content: this._body\n      };\n    } else if (this._form !== undefined) {\n      request.body = {\n        type: 'form',\n        content: this._form\n      };\n    } else if (this._formData !== undefined) {\n      request.body = {\n        type: 'form-data',\n        content: this._formData\n      };\n    } else if (this._stream !== undefined) {\n      request.body = {\n        type: 'stream',\n        content: this._stream\n      };\n    }\n\n    return request;\n  };\n\n  DefaultRequestBuilder.prototype.intercept = function (interceptor) {\n    this._interceptors.push(interceptor);\n  };\n\n  DefaultRequestBuilder.prototype.interceptRequest = function (interceptor) {\n    this.intercept(function (req, opt, next) {\n      return next(interceptor(req), opt);\n    });\n  };\n\n  DefaultRequestBuilder.prototype.interceptResponse = function (interceptor) {\n    var _this = this;\n\n    this.intercept(function (req, opt, next) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _a = interceptor;\n              return [4\n              /*yield*/\n              , next(req, opt)];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.apply(void 0, [_b.sent()])];\n          }\n        });\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.defaultToError = function (apiErrorCtor) {\n    this._apiErrorFactory = apiErrorCtor;\n  };\n\n  DefaultRequestBuilder.prototype.validateResponse = function (validate) {\n    this._validateResponse = validate;\n  };\n\n  DefaultRequestBuilder.prototype.throwOn = function (statusCode, errorConstructor) {\n    var args = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n\n    this.interceptResponse(function (context) {\n      var response = context.response;\n\n      if (typeof statusCode === 'number' && response.statusCode === statusCode || typeof statusCode !== 'number' && response.statusCode >= statusCode[0] && response.statusCode <= statusCode[1]) {\n        throw new (errorConstructor.bind.apply(errorConstructor, __spreadArray([void 0, context], __read(args))))();\n      }\n\n      return context;\n    });\n  };\n\n  DefaultRequestBuilder.prototype.call = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pipeline, _a, request, response;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            pipeline = callHttpInterceptors(this._interceptors, // tslint:disable-next-line:no-shadowed-variable\n            function (request, opt) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this._httpClient(request, opt)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        request: request,\n                        response: response\n                      }];\n                  }\n                });\n              });\n            });\n            return [4\n            /*yield*/\n            , pipeline(this.toRequest(), requestOptions)];\n\n          case 1:\n            _a = _b.sent(), request = _a.request, response = _a.response;\n            return [2\n            /*return*/\n            , __assign(__assign({}, response), {\n              request: request,\n              result: undefined\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsText = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (typeof result.body !== 'string') {\n              throw new Error('Could not parse body as string.'); // TODO: Replace with SDK error\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: result.body\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsOptionalText = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (typeof result.body !== 'string') {\n              return [2\n              /*return*/\n              , __assign(__assign({}, result), {\n                result: undefined\n              })];\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: result.body\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsStream = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.interceptRequest(function (req) {\n              return __assign(__assign({}, req), {\n                responseType: 'stream'\n              });\n            });\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: convertToStream(result.body)\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsJson = function (schema, requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, parsed, mappingResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.interceptRequest(function (request) {\n              var headers = __assign({}, request.headers);\n\n              setHeaderIfNotSet(headers, ACCEPT_HEADER, JSON_CONTENT_TYPE);\n              return __assign(__assign({}, request), {\n                headers: headers\n              });\n            });\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.body === '') {\n              throw new Error('Could not parse body as JSON. The response body is empty.');\n            }\n\n            if (typeof result.body !== 'string') {\n              throw new Error('Could not parse body as JSON. The response body is not a string.');\n            }\n\n            try {\n              parsed = JSON.parse(result.body);\n            } catch (error) {\n              throw new Error(\"Could not parse body as JSON.\\n\\n\" + error.message);\n            }\n\n            mappingResult = validateAndMap(parsed, schema);\n\n            if (mappingResult.errors) {\n              throw new ResponseValidationError(result, mappingResult.errors);\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: mappingResult.result\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsXml = function (rootName, schema, requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, xmlObject, error_1, mappingResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.interceptRequest(function (request) {\n              var headers = __assign({}, request.headers);\n\n              setHeaderIfNotSet(headers, ACCEPT_HEADER, XML_CONTENT_TYPE);\n              return __assign(__assign({}, request), {\n                headers: headers\n              });\n            });\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.body === '') {\n              throw new Error('Could not parse body as XML. The response body is empty.');\n            }\n\n            if (typeof result.body !== 'string') {\n              throw new Error('Could not parse body as XML. The response body is not a string.');\n            }\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._xmlSerializer.xmlDeserialize(rootName, result.body)];\n\n          case 3:\n            xmlObject = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            throw new Error(\"Could not parse body as XML.\\n\\n\" + error_1.message);\n\n          case 5:\n            mappingResult = validateAndMapXml(xmlObject, schema);\n\n            if (mappingResult.errors) {\n              throw new ResponseValidationError(result, mappingResult.errors);\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: mappingResult.result\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype._setContentTypeIfNotSet = function (contentType) {\n    if (!this._contentType) {\n      setHeaderIfNotSet(this._headers, CONTENT_TYPE_HEADER, contentType);\n    }\n  };\n\n  DefaultRequestBuilder.prototype._addResponseValidator = function () {\n    var _this = this;\n\n    this.interceptResponse(function (context) {\n      var response = context.response;\n\n      if (_this._validateResponse && (response.statusCode < 200 || response.statusCode >= 300)) {\n        throw new _this._apiErrorFactory(context, \"Response status code was not ok: \" + response.statusCode + \".\");\n      }\n\n      return context;\n    });\n  };\n\n  DefaultRequestBuilder.prototype._addAuthentication = function () {\n    var _this = this;\n\n    this.intercept(function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var handler = _this._authenticationProvider(_this._authParams);\n\n      return handler.apply(void 0, __spreadArray([], __read(args)));\n    });\n  };\n\n  return DefaultRequestBuilder;\n}();\n\nfunction createRequestBuilderFactory(httpClient, baseUrlProvider, apiErrorFactory, authenticationProvider, xmlSerializer) {\n  return function (httpMethod, path) {\n    return new DefaultRequestBuilder(httpClient, baseUrlProvider, apiErrorFactory, authenticationProvider, httpMethod, xmlSerializer, path);\n  };\n}\n\nfunction mergePath(left, right) {\n  if (!right || right === '') {\n    return left;\n  }\n\n  if (left[left.length - 1] === '/' && right[0] === '/') {\n    return left + right.substr(1);\n  } else if (left[left.length - 1] === '/' || right[0] === '/') {\n    return left + right;\n  } else {\n    return left + \"/\" + right;\n  }\n}\n\nfunction convertToStream(content) {\n  if (typeof content !== 'string') {\n    return content;\n  }\n\n  if (isNode) {\n    // ref: https://stackoverflow.com/a/22085851\n    var rs = new (require('stream').Readable)(); // tslint:disable-next-line:no-empty\n\n    rs._read = function () {};\n\n    rs.push(content);\n    rs.push(null);\n    return rs;\n  }\n\n  return new Blob([content]);\n}\n\nexport { DefaultRequestBuilder, convertToStream, createRequestBuilderFactory, skipEncode };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/core/es/http/requestBuilder.js"],"names":["__spreadArray","__read","__assign","__awaiter","__generator","isNode","JSONBig","deprecated","sanitizeUrl","ArgumentsValidationError","ResponseValidationError","validateAndUnmapXml","validateAndMap","validateAndMapXml","JSON_CONTENT_TYPE","setHeader","mergeHeaders","TEXT_CONTENT_TYPE","XML_CONTENT_TYPE","ACCEPT_HEADER","CONTENT_TYPE_HEADER","setHeaderIfNotSet","CONTENT_LENGTH_HEADER","callHttpInterceptors","SkipEncode","pathTemplate","urlEncodeObject","filterFileWrapperFromKeyValuePairs","formDataEncodeObject","prepareArgs","JSON","useNativeBigInt","skipEncode","value","DefaultRequestBuilder","_httpClient","_baseUrlProvider","_apiErrorFactory","_authenticationProvider","_httpMethod","_xmlSerializer","_path","_headers","_query","_interceptors","_validateResponse","_addResponseValidator","_addAuthentication","bind","prototype","authenticate","params","_authParams","methodName","message","appendTemplatePath","strings","args","_i","arguments","length","pathSegment","apply","appendPath","method","httpMethodName","baseUrl","arg","_baseUrlArg","path","mergePath","acceptJson","_accept","accept","acceptHeaderValue","contentType","contentTypeHeaderValue","_contentType","header","name","undefined","toString","headers","headersToMerge","query","nameOrParameters","_a","queryString","push","text","body","_body","_setContentTypeIfNotSet","json","data","stringify","xml","argName","rootName","schema","mappingResult","errors","xmlSerialize","result","stream","file","_stream","form","parameters","_form","formData","_formData","toRequest","request","url","join","indexOf","type","content","intercept","interceptor","interceptRequest","req","opt","next","interceptResponse","_this","_b","label","sent","defaultToError","apiErrorCtor","validateResponse","validate","throwOn","statusCode","errorConstructor","context","response","call","requestOptions","pipeline","callAsText","Error","callAsOptionalText","callAsStream","responseType","convertToStream","callAsJson","parsed","parse","error","callAsXml","xmlObject","error_1","trys","xmlDeserialize","handler","createRequestBuilderFactory","httpClient","baseUrlProvider","apiErrorFactory","authenticationProvider","xmlSerializer","httpMethod","left","right","substr","rs","require","Readable","_read","Blob"],"mappings":"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","sourcesContent":["import { __spreadArray, __read, __assign, __awaiter, __generator } from 'tslib';\nimport isNode from 'detect-node';\nimport JSONBig from 'json-bigint';\nimport { deprecated, sanitizeUrl } from '../apiHelper.js';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError.js';\nimport { ResponseValidationError } from '../errors/responseValidationError.js';\nimport { validateAndUnmapXml, validateAndMap, validateAndMapXml } from '@apimatic/schema';\nimport { JSON_CONTENT_TYPE, setHeader, mergeHeaders, TEXT_CONTENT_TYPE, XML_CONTENT_TYPE, ACCEPT_HEADER, CONTENT_TYPE_HEADER, setHeaderIfNotSet, CONTENT_LENGTH_HEADER } from './httpHeaders.js';\nimport { callHttpInterceptors } from './httpInterceptor.js';\nimport { SkipEncode, pathTemplate } from './pathTemplate.js';\nimport { urlEncodeObject, filterFileWrapperFromKeyValuePairs, formDataEncodeObject } from './queryString.js';\nimport { prepareArgs } from './validate.js';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\nvar JSON = /*#__PURE__*/JSONBig({\n  useNativeBigInt: true\n});\n\nfunction skipEncode(value) {\n  return new SkipEncode(value);\n}\n\nvar DefaultRequestBuilder =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function DefaultRequestBuilder(_httpClient, _baseUrlProvider, _apiErrorFactory, _authenticationProvider, _httpMethod, _xmlSerializer, _path) {\n    this._httpClient = _httpClient;\n    this._baseUrlProvider = _baseUrlProvider;\n    this._apiErrorFactory = _apiErrorFactory;\n    this._authenticationProvider = _authenticationProvider;\n    this._httpMethod = _httpMethod;\n    this._xmlSerializer = _xmlSerializer;\n    this._path = _path;\n    this._headers = {};\n    this._query = [];\n    this._interceptors = [];\n    this._validateResponse = true;\n\n    this._addResponseValidator();\n\n    this._addAuthentication();\n\n    this.prepareArgs = prepareArgs.bind(this);\n  }\n\n  DefaultRequestBuilder.prototype.authenticate = function (params) {\n    this._authParams = params;\n  };\n\n  DefaultRequestBuilder.prototype.deprecated = function (methodName, message) {\n    deprecated(methodName, message);\n  };\n\n  DefaultRequestBuilder.prototype.appendTemplatePath = function (strings) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var pathSegment = pathTemplate.apply(void 0, __spreadArray([strings], __read(args)));\n    this.appendPath(pathSegment);\n  };\n\n  DefaultRequestBuilder.prototype.method = function (httpMethodName) {\n    this._httpMethod = httpMethodName;\n  };\n\n  DefaultRequestBuilder.prototype.baseUrl = function (arg) {\n    this._baseUrlArg = arg;\n  };\n\n  DefaultRequestBuilder.prototype.appendPath = function (path) {\n    this._path = this._path ? mergePath(this._path, path) : path;\n  };\n\n  DefaultRequestBuilder.prototype.acceptJson = function () {\n    this._accept = JSON_CONTENT_TYPE;\n  };\n\n  DefaultRequestBuilder.prototype.accept = function (acceptHeaderValue) {\n    this._accept = acceptHeaderValue;\n  };\n\n  DefaultRequestBuilder.prototype.contentType = function (contentTypeHeaderValue) {\n    this._contentType = contentTypeHeaderValue;\n  };\n\n  DefaultRequestBuilder.prototype.header = function (name, value) {\n    if (value === undefined) {\n      return;\n    }\n\n    setHeader(this._headers, name, value.toString());\n  };\n\n  DefaultRequestBuilder.prototype.headers = function (headersToMerge) {\n    mergeHeaders(this._headers, headersToMerge);\n  };\n\n  DefaultRequestBuilder.prototype.query = function (nameOrParameters, value) {\n    var _a;\n\n    if (nameOrParameters === null || nameOrParameters === undefined) {\n      return;\n    }\n\n    var queryString = typeof nameOrParameters === 'string' ? urlEncodeObject((_a = {}, _a[nameOrParameters] = value, _a)) : urlEncodeObject(nameOrParameters);\n\n    if (queryString) {\n      this._query.push(queryString);\n    }\n  };\n\n  DefaultRequestBuilder.prototype.text = function (body) {\n    this._body = body;\n\n    this._setContentTypeIfNotSet(TEXT_CONTENT_TYPE);\n  };\n\n  DefaultRequestBuilder.prototype.json = function (data) {\n    this._body = JSON.stringify(data);\n\n    this._setContentTypeIfNotSet(JSON_CONTENT_TYPE);\n  };\n\n  DefaultRequestBuilder.prototype.xml = function (argName, data, rootName, schema) {\n    var _a;\n\n    var mappingResult = validateAndUnmapXml(data, schema);\n\n    if (mappingResult.errors) {\n      throw new ArgumentsValidationError((_a = {}, _a[argName] = mappingResult.errors, _a));\n    }\n\n    this._body = this._xmlSerializer.xmlSerialize(rootName, mappingResult.result);\n\n    this._setContentTypeIfNotSet(XML_CONTENT_TYPE);\n  };\n\n  DefaultRequestBuilder.prototype.stream = function (file) {\n    this._stream = file;\n  };\n\n  DefaultRequestBuilder.prototype.form = function (parameters) {\n    this._form = filterFileWrapperFromKeyValuePairs(formDataEncodeObject(parameters));\n  };\n\n  DefaultRequestBuilder.prototype.formData = function (parameters) {\n    this._formData = formDataEncodeObject(parameters);\n  };\n\n  DefaultRequestBuilder.prototype.toRequest = function () {\n    var request = {\n      method: this._httpMethod,\n      url: mergePath(this._baseUrlProvider(this._baseUrlArg), this._path)\n    };\n\n    if (this._query.length > 0) {\n      var queryString = this._query.join('&');\n\n      request.url += (request.url.indexOf('?') === -1 ? '?' : '&') + queryString;\n    }\n\n    request.url = sanitizeUrl(request.url); // defensively copy headers\n\n    var headers = __assign({}, this._headers);\n\n    if (this._accept) {\n      setHeader(headers, ACCEPT_HEADER, this._accept);\n    }\n\n    if (this._contentType) {\n      setHeader(headers, CONTENT_TYPE_HEADER, this._contentType);\n    }\n\n    setHeader(headers, CONTENT_LENGTH_HEADER);\n    request.headers = headers;\n\n    if (this._body !== undefined) {\n      request.body = {\n        type: 'text',\n        content: this._body\n      };\n    } else if (this._form !== undefined) {\n      request.body = {\n        type: 'form',\n        content: this._form\n      };\n    } else if (this._formData !== undefined) {\n      request.body = {\n        type: 'form-data',\n        content: this._formData\n      };\n    } else if (this._stream !== undefined) {\n      request.body = {\n        type: 'stream',\n        content: this._stream\n      };\n    }\n\n    return request;\n  };\n\n  DefaultRequestBuilder.prototype.intercept = function (interceptor) {\n    this._interceptors.push(interceptor);\n  };\n\n  DefaultRequestBuilder.prototype.interceptRequest = function (interceptor) {\n    this.intercept(function (req, opt, next) {\n      return next(interceptor(req), opt);\n    });\n  };\n\n  DefaultRequestBuilder.prototype.interceptResponse = function (interceptor) {\n    var _this = this;\n\n    this.intercept(function (req, opt, next) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _a = interceptor;\n              return [4\n              /*yield*/\n              , next(req, opt)];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.apply(void 0, [_b.sent()])];\n          }\n        });\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.defaultToError = function (apiErrorCtor) {\n    this._apiErrorFactory = apiErrorCtor;\n  };\n\n  DefaultRequestBuilder.prototype.validateResponse = function (validate) {\n    this._validateResponse = validate;\n  };\n\n  DefaultRequestBuilder.prototype.throwOn = function (statusCode, errorConstructor) {\n    var args = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n\n    this.interceptResponse(function (context) {\n      var response = context.response;\n\n      if (typeof statusCode === 'number' && response.statusCode === statusCode || typeof statusCode !== 'number' && response.statusCode >= statusCode[0] && response.statusCode <= statusCode[1]) {\n        throw new (errorConstructor.bind.apply(errorConstructor, __spreadArray([void 0, context], __read(args))))();\n      }\n\n      return context;\n    });\n  };\n\n  DefaultRequestBuilder.prototype.call = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pipeline, _a, request, response;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            pipeline = callHttpInterceptors(this._interceptors, // tslint:disable-next-line:no-shadowed-variable\n            function (request, opt) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this._httpClient(request, opt)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        request: request,\n                        response: response\n                      }];\n                  }\n                });\n              });\n            });\n            return [4\n            /*yield*/\n            , pipeline(this.toRequest(), requestOptions)];\n\n          case 1:\n            _a = _b.sent(), request = _a.request, response = _a.response;\n            return [2\n            /*return*/\n            , __assign(__assign({}, response), {\n              request: request,\n              result: undefined\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsText = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (typeof result.body !== 'string') {\n              throw new Error('Could not parse body as string.'); // TODO: Replace with SDK error\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: result.body\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsOptionalText = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (typeof result.body !== 'string') {\n              return [2\n              /*return*/\n              , __assign(__assign({}, result), {\n                result: undefined\n              })];\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: result.body\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsStream = function (requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.interceptRequest(function (req) {\n              return __assign(__assign({}, req), {\n                responseType: 'stream'\n              });\n            });\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: convertToStream(result.body)\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsJson = function (schema, requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, parsed, mappingResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.interceptRequest(function (request) {\n              var headers = __assign({}, request.headers);\n\n              setHeaderIfNotSet(headers, ACCEPT_HEADER, JSON_CONTENT_TYPE);\n              return __assign(__assign({}, request), {\n                headers: headers\n              });\n            });\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.body === '') {\n              throw new Error('Could not parse body as JSON. The response body is empty.');\n            }\n\n            if (typeof result.body !== 'string') {\n              throw new Error('Could not parse body as JSON. The response body is not a string.');\n            }\n\n            try {\n              parsed = JSON.parse(result.body);\n            } catch (error) {\n              throw new Error(\"Could not parse body as JSON.\\n\\n\" + error.message);\n            }\n\n            mappingResult = validateAndMap(parsed, schema);\n\n            if (mappingResult.errors) {\n              throw new ResponseValidationError(result, mappingResult.errors);\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: mappingResult.result\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype.callAsXml = function (rootName, schema, requestOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, xmlObject, error_1, mappingResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.interceptRequest(function (request) {\n              var headers = __assign({}, request.headers);\n\n              setHeaderIfNotSet(headers, ACCEPT_HEADER, XML_CONTENT_TYPE);\n              return __assign(__assign({}, request), {\n                headers: headers\n              });\n            });\n            return [4\n            /*yield*/\n            , this.call(requestOptions)];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.body === '') {\n              throw new Error('Could not parse body as XML. The response body is empty.');\n            }\n\n            if (typeof result.body !== 'string') {\n              throw new Error('Could not parse body as XML. The response body is not a string.');\n            }\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._xmlSerializer.xmlDeserialize(rootName, result.body)];\n\n          case 3:\n            xmlObject = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            throw new Error(\"Could not parse body as XML.\\n\\n\" + error_1.message);\n\n          case 5:\n            mappingResult = validateAndMapXml(xmlObject, schema);\n\n            if (mappingResult.errors) {\n              throw new ResponseValidationError(result, mappingResult.errors);\n            }\n\n            return [2\n            /*return*/\n            , __assign(__assign({}, result), {\n              result: mappingResult.result\n            })];\n        }\n      });\n    });\n  };\n\n  DefaultRequestBuilder.prototype._setContentTypeIfNotSet = function (contentType) {\n    if (!this._contentType) {\n      setHeaderIfNotSet(this._headers, CONTENT_TYPE_HEADER, contentType);\n    }\n  };\n\n  DefaultRequestBuilder.prototype._addResponseValidator = function () {\n    var _this = this;\n\n    this.interceptResponse(function (context) {\n      var response = context.response;\n\n      if (_this._validateResponse && (response.statusCode < 200 || response.statusCode >= 300)) {\n        throw new _this._apiErrorFactory(context, \"Response status code was not ok: \" + response.statusCode + \".\");\n      }\n\n      return context;\n    });\n  };\n\n  DefaultRequestBuilder.prototype._addAuthentication = function () {\n    var _this = this;\n\n    this.intercept(function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var handler = _this._authenticationProvider(_this._authParams);\n\n      return handler.apply(void 0, __spreadArray([], __read(args)));\n    });\n  };\n\n  return DefaultRequestBuilder;\n}();\n\nfunction createRequestBuilderFactory(httpClient, baseUrlProvider, apiErrorFactory, authenticationProvider, xmlSerializer) {\n  return function (httpMethod, path) {\n    return new DefaultRequestBuilder(httpClient, baseUrlProvider, apiErrorFactory, authenticationProvider, httpMethod, xmlSerializer, path);\n  };\n}\n\nfunction mergePath(left, right) {\n  if (!right || right === '') {\n    return left;\n  }\n\n  if (left[left.length - 1] === '/' && right[0] === '/') {\n    return left + right.substr(1);\n  } else if (left[left.length - 1] === '/' || right[0] === '/') {\n    return left + right;\n  } else {\n    return left + \"/\" + right;\n  }\n}\n\nfunction convertToStream(content) {\n  if (typeof content !== 'string') {\n    return content;\n  }\n\n  if (isNode) {\n    // ref: https://stackoverflow.com/a/22085851\n    var rs = new (require('stream').Readable)(); // tslint:disable-next-line:no-empty\n\n    rs._read = function () {};\n\n    rs.push(content);\n    rs.push(null);\n    return rs;\n  }\n\n  return new Blob([content]);\n}\n\nexport { DefaultRequestBuilder, convertToStream, createRequestBuilderFactory, skipEncode };"]},"metadata":{},"sourceType":"module"}