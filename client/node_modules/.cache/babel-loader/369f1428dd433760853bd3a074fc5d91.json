{"ast":null,"code":"import { toValidator, isNumericString, coerceNumericStringToNumber, createSymmetricSchema } from '../utils.js';\n\nfunction createEnumChecker(enumVariable) {\n  var enumValues = Object.values(enumVariable);\n  return function (value) {\n    return isNumericString(value) && enumValues.includes(coerceNumericStringToNumber(value));\n  };\n}\n/**\r\n * Create a schema for a number enumeration.\r\n */\n\n\nfunction numberEnum(enumVariable) {\n  var validate = toValidator(createEnumChecker(enumVariable));\n  return createSymmetricSchema({\n    type: \"Enum<\" + Object.values(enumVariable).filter(function (v) {\n      return typeof v === 'number';\n    }).join(',') + \">\",\n    map: coerceNumericStringToNumber,\n    validate: validate\n  });\n}\n\nexport { numberEnum };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/schema/es/types/numberEnum.js"],"names":["toValidator","isNumericString","coerceNumericStringToNumber","createSymmetricSchema","createEnumChecker","enumVariable","enumValues","Object","values","value","includes","numberEnum","validate","type","filter","v","join","map"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,2BAAvC,EAAoEC,qBAApE,QAAiG,aAAjG;;AAEA,SAASC,iBAAT,CAA2BC,YAA3B,EAAyC;AACvC,MAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,YAAd,CAAjB;AACA,SAAO,UAAUI,KAAV,EAAiB;AACtB,WAAOR,eAAe,CAACQ,KAAD,CAAf,IAA0BH,UAAU,CAACI,QAAX,CAAoBR,2BAA2B,CAACO,KAAD,CAA/C,CAAjC;AACD,GAFD;AAGD;AACD;AACA;AACA;;;AAGA,SAASE,UAAT,CAAoBN,YAApB,EAAkC;AAChC,MAAIO,QAAQ,GAAGZ,WAAW,CAACI,iBAAiB,CAACC,YAAD,CAAlB,CAA1B;AACA,SAAOF,qBAAqB,CAAC;AAC3BU,IAAAA,IAAI,EAAE,UAAUN,MAAM,CAACC,MAAP,CAAcH,YAAd,EAA4BS,MAA5B,CAAmC,UAAUC,CAAV,EAAa;AAC9D,aAAO,OAAOA,CAAP,KAAa,QAApB;AACD,KAFe,EAEbC,IAFa,CAER,GAFQ,CAAV,GAES,GAHY;AAI3BC,IAAAA,GAAG,EAAEf,2BAJsB;AAK3BU,IAAAA,QAAQ,EAAEA;AALiB,GAAD,CAA5B;AAOD;;AAED,SAASD,UAAT","sourcesContent":["import { toValidator, isNumericString, coerceNumericStringToNumber, createSymmetricSchema } from '../utils.js';\n\nfunction createEnumChecker(enumVariable) {\n  var enumValues = Object.values(enumVariable);\n  return function (value) {\n    return isNumericString(value) && enumValues.includes(coerceNumericStringToNumber(value));\n  };\n}\n/**\r\n * Create a schema for a number enumeration.\r\n */\n\n\nfunction numberEnum(enumVariable) {\n  var validate = toValidator(createEnumChecker(enumVariable));\n  return createSymmetricSchema({\n    type: \"Enum<\" + Object.values(enumVariable).filter(function (v) {\n      return typeof v === 'number';\n    }).join(',') + \">\",\n    map: coerceNumericStringToNumber,\n    validate: validate\n  });\n}\n\nexport { numberEnum };"]},"metadata":{},"sourceType":"module"}