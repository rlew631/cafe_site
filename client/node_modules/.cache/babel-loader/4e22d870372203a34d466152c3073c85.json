{"ast":null,"code":"import { __assign } from 'tslib';\n/**\r\n * Utilities for internal library usage\r\n */\n\nfunction arrayEntries(arr) {\n  var entries = [];\n\n  for (var index = 0; index < arr.length; index++) {\n    var element = arr[index];\n    entries.push([index, element]);\n  }\n\n  return entries;\n}\n\nfunction objectEntries(obj) {\n  var ownProps = Object.keys(obj);\n  var i = ownProps.length;\n  var resArray = new Array(i); // preallocate the Array\n\n  while (i--) {\n    resArray[i] = [ownProps[i], obj[ownProps[i]]];\n  }\n\n  return resArray;\n}\n\nfunction literalToString(value) {\n  return typeof value === 'string' ? \"\\\"\" + value.replace(/\"/g, '\"') + \"\\\"\" : \"\" + value;\n}\n\nfunction identityFn(value) {\n  return value;\n}\n\nfunction toValidator(fn) {\n  return function (value, ctxt) {\n    return fn(value) ? [] : ctxt.fail();\n  };\n}\n/**\r\n * Create a schema in which the mapping and unmapping is done the same way\r\n */\n\n\nfunction createSymmetricSchema(schema) {\n  return createBasicSchema({\n    type: function type() {\n      return schema.type;\n    },\n    validateBeforeMap: schema.validate,\n    validateBeforeUnmap: schema.validate,\n    map: schema.map,\n    unmap: schema.map\n  });\n}\n/** Create a basic schema where XML mapping and validation is the same as for JSON */\n\n\nfunction createBasicSchema(basicSchema) {\n  return __assign(__assign({}, basicSchema), {\n    validateBeforeMapXml: basicSchema.validateBeforeUnmap,\n    mapXml: basicSchema.map,\n    unmapXml: basicSchema.unmap\n  });\n}\n\nfunction isNumericString(value) {\n  return typeof value === 'number' || typeof value === 'string' && !isNaN(value);\n}\n\nfunction coerceNumericStringToNumber(value) {\n  return typeof value === 'number' ? value : +value;\n}\n\nfunction coerceStringOrNumberToBigInt(value) {\n  return typeof value === 'bigint' ? value : BigInt(value);\n}\n\nfunction once(func) {\n  var ran = false;\n  var memo;\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (ran) {\n      return memo;\n    }\n\n    ran = true;\n    memo = func.apply(this, args);\n    return memo;\n  };\n}\n/**\r\n * Returns a copy of the object with the given keys omitted.\r\n */\n\n\nfunction omitKeysFromObject(object, keysToOmit) {\n  var omitSet = new Set(keysToOmit);\n  var output = {};\n\n  for (var key in object) {\n    if (Object.prototype.hasOwnProperty.call(object, key) && !omitSet.has(key)) {\n      output[key] = object[key];\n    }\n  }\n\n  return output;\n}\n\nfunction objectKeyEncode(key) {\n  return key.indexOf(' ') !== -1 ? literalToString(key) : key;\n}\n\nexport { arrayEntries, coerceNumericStringToNumber, coerceStringOrNumberToBigInt, createSymmetricSchema, identityFn, isNumericString, literalToString, objectEntries, objectKeyEncode, omitKeysFromObject, once, toValidator };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/schema/es/utils.js"],"names":["__assign","arrayEntries","arr","entries","index","length","element","push","objectEntries","obj","ownProps","Object","keys","i","resArray","Array","literalToString","value","replace","identityFn","toValidator","fn","ctxt","fail","createSymmetricSchema","schema","createBasicSchema","type","validateBeforeMap","validate","validateBeforeUnmap","map","unmap","basicSchema","validateBeforeMapXml","mapXml","unmapXml","isNumericString","isNaN","coerceNumericStringToNumber","coerceStringOrNumberToBigInt","BigInt","once","func","ran","memo","args","_i","arguments","apply","omitKeysFromObject","object","keysToOmit","omitSet","Set","output","key","prototype","hasOwnProperty","call","has","objectKeyEncode","indexOf"],"mappings":"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","sourcesContent":["import { __assign } from 'tslib';\n/**\r\n * Utilities for internal library usage\r\n */\n\nfunction arrayEntries(arr) {\n  var entries = [];\n\n  for (var index = 0; index < arr.length; index++) {\n    var element = arr[index];\n    entries.push([index, element]);\n  }\n\n  return entries;\n}\n\nfunction objectEntries(obj) {\n  var ownProps = Object.keys(obj);\n  var i = ownProps.length;\n  var resArray = new Array(i); // preallocate the Array\n\n  while (i--) {\n    resArray[i] = [ownProps[i], obj[ownProps[i]]];\n  }\n\n  return resArray;\n}\n\nfunction literalToString(value) {\n  return typeof value === 'string' ? \"\\\"\" + value.replace(/\"/g, '\"') + \"\\\"\" : \"\" + value;\n}\n\nfunction identityFn(value) {\n  return value;\n}\n\nfunction toValidator(fn) {\n  return function (value, ctxt) {\n    return fn(value) ? [] : ctxt.fail();\n  };\n}\n/**\r\n * Create a schema in which the mapping and unmapping is done the same way\r\n */\n\n\nfunction createSymmetricSchema(schema) {\n  return createBasicSchema({\n    type: function () {\n      return schema.type;\n    },\n    validateBeforeMap: schema.validate,\n    validateBeforeUnmap: schema.validate,\n    map: schema.map,\n    unmap: schema.map\n  });\n}\n/** Create a basic schema where XML mapping and validation is the same as for JSON */\n\n\nfunction createBasicSchema(basicSchema) {\n  return __assign(__assign({}, basicSchema), {\n    validateBeforeMapXml: basicSchema.validateBeforeUnmap,\n    mapXml: basicSchema.map,\n    unmapXml: basicSchema.unmap\n  });\n}\n\nfunction isNumericString(value) {\n  return typeof value === 'number' || typeof value === 'string' && !isNaN(value);\n}\n\nfunction coerceNumericStringToNumber(value) {\n  return typeof value === 'number' ? value : +value;\n}\n\nfunction coerceStringOrNumberToBigInt(value) {\n  return typeof value === 'bigint' ? value : BigInt(value);\n}\n\nfunction once(func) {\n  var ran = false;\n  var memo;\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (ran) {\n      return memo;\n    }\n\n    ran = true;\n    memo = func.apply(this, args);\n    return memo;\n  };\n}\n/**\r\n * Returns a copy of the object with the given keys omitted.\r\n */\n\n\nfunction omitKeysFromObject(object, keysToOmit) {\n  var omitSet = new Set(keysToOmit);\n  var output = {};\n\n  for (var key in object) {\n    if (Object.prototype.hasOwnProperty.call(object, key) && !omitSet.has(key)) {\n      output[key] = object[key];\n    }\n  }\n\n  return output;\n}\n\nfunction objectKeyEncode(key) {\n  return key.indexOf(' ') !== -1 ? literalToString(key) : key;\n}\n\nexport { arrayEntries, coerceNumericStringToNumber, coerceStringOrNumberToBigInt, createSymmetricSchema, identityFn, isNumericString, literalToString, objectEntries, objectKeyEncode, omitKeysFromObject, once, toValidator };"]},"metadata":{},"sourceType":"module"}