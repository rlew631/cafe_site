{"ast":null,"code":"import { validateAndUnmap } from '@apimatic/schema';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError.js';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/**\r\n * Prepares arguments for being sent in the API request.\r\n *\r\n * Each argument is validated and converted to a JSON-serialization ready value.\r\n *\r\n * If one or more arguments fail validation, an ArgumentsValidationError is\r\n * thrown, which contains the validation details for all arguments that failed\r\n * validation.\r\n *\r\n * @param params Map of arguments with values and schema\r\n * @returns Map of serialization-ready argument values\r\n *\r\n * @throws ArgumentsValidationError\r\n */\n\nfunction prepareArgs(params) {\n  var validationErrors = {};\n  var result = {};\n\n  for (var paramName in params) {\n    if (Object.prototype.hasOwnProperty.call(params, paramName)) {\n      var paramInfo = params[paramName];\n      var validationResult = validateAndUnmap(paramInfo[0], paramInfo[1]);\n\n      if (validationResult.errors) {\n        validationErrors[paramName] = validationResult.errors;\n      } else {\n        result[paramName] = validationResult.result;\n      }\n    }\n  }\n\n  if (Object.keys(validationErrors).length > 0) {\n    throw new ArgumentsValidationError(validationErrors);\n  }\n\n  return result;\n}\n\nexport { prepareArgs };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/core/es/http/validate.js"],"names":["validateAndUnmap","ArgumentsValidationError","prepareArgs","params","validationErrors","result","paramName","Object","prototype","hasOwnProperty","call","paramInfo","validationResult","errors","keys","length"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,wBAAT,QAAyC,uCAAzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,SAAT,IAAsBH,MAAtB,EAA8B;AAC5B,QAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,MAArC,EAA6CG,SAA7C,CAAJ,EAA6D;AAC3D,UAAIK,SAAS,GAAGR,MAAM,CAACG,SAAD,CAAtB;AACA,UAAIM,gBAAgB,GAAGZ,gBAAgB,CAACW,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAAvC;;AAEA,UAAIC,gBAAgB,CAACC,MAArB,EAA6B;AAC3BT,QAAAA,gBAAgB,CAACE,SAAD,CAAhB,GAA8BM,gBAAgB,CAACC,MAA/C;AACD,OAFD,MAEO;AACLR,QAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBM,gBAAgB,CAACP,MAArC;AACD;AACF;AACF;;AAED,MAAIE,MAAM,CAACO,IAAP,CAAYV,gBAAZ,EAA8BW,MAA9B,GAAuC,CAA3C,EAA8C;AAC5C,UAAM,IAAId,wBAAJ,CAA6BG,gBAA7B,CAAN;AACD;;AAED,SAAOC,MAAP;AACD;;AAED,SAASH,WAAT","sourcesContent":["import { validateAndUnmap } from '@apimatic/schema';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError.js';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/**\r\n * Prepares arguments for being sent in the API request.\r\n *\r\n * Each argument is validated and converted to a JSON-serialization ready value.\r\n *\r\n * If one or more arguments fail validation, an ArgumentsValidationError is\r\n * thrown, which contains the validation details for all arguments that failed\r\n * validation.\r\n *\r\n * @param params Map of arguments with values and schema\r\n * @returns Map of serialization-ready argument values\r\n *\r\n * @throws ArgumentsValidationError\r\n */\n\nfunction prepareArgs(params) {\n  var validationErrors = {};\n  var result = {};\n\n  for (var paramName in params) {\n    if (Object.prototype.hasOwnProperty.call(params, paramName)) {\n      var paramInfo = params[paramName];\n      var validationResult = validateAndUnmap(paramInfo[0], paramInfo[1]);\n\n      if (validationResult.errors) {\n        validationErrors[paramName] = validationResult.errors;\n      } else {\n        result[paramName] = validationResult.result;\n      }\n    }\n  }\n\n  if (Object.keys(validationErrors).length > 0) {\n    throw new ArgumentsValidationError(validationErrors);\n  }\n\n  return result;\n}\n\nexport { prepareArgs };"]},"metadata":{},"sourceType":"module"}