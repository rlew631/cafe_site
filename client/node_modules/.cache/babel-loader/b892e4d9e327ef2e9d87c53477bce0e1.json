{"ast":null,"code":"import { __read } from 'tslib';\nimport { objectEntries } from '../utils.js';\n\nfunction discriminatedObject(discriminatorMappedPropName, discriminatorPropName, discriminatorMap, defaultDiscriminator, xmlOptions) {\n  var schemaSelector = function schemaSelector(value, discriminatorProp, isAttr) {\n    if (isAttr === void 0) {\n      isAttr = false;\n    }\n\n    if (typeof value === 'object' && value !== null && (isAttr && xmlObjectHasAttribute(value, discriminatorProp) || !isAttr && discriminatorProp in value)) {\n      var discriminatorValue = isAttr ? value.$[discriminatorProp] : value[discriminatorProp];\n\n      if (typeof discriminatorValue === 'string' && discriminatorValue in discriminatorMap) {\n        return discriminatorMap[discriminatorValue];\n      }\n    }\n\n    return discriminatorMap[defaultDiscriminator];\n  };\n\n  return {\n    type: function type() {\n      return \"DiscriminatedUnion<\" + discriminatorPropName + \",[\" + objectEntries(discriminatorMap).map(function (_a) {\n        var _b = __read(_a, 2);\n\n        _b[0];\n        var v = _b[1];\n        return v.type;\n      }).join(',') + \"]>\";\n    },\n    map: function map(value, ctxt) {\n      return schemaSelector(value, discriminatorPropName).map(value, ctxt);\n    },\n    unmap: function unmap(value, ctxt) {\n      return schemaSelector(value, discriminatorMappedPropName).unmap(value, ctxt);\n    },\n    validateBeforeMap: function validateBeforeMap(value, ctxt) {\n      return schemaSelector(value, discriminatorPropName).validateBeforeMap(value, ctxt);\n    },\n    validateBeforeUnmap: function validateBeforeUnmap(value, ctxt) {\n      return schemaSelector(value, discriminatorMappedPropName).validateBeforeUnmap(value, ctxt);\n    },\n    mapXml: function mapXml(value, ctxt) {\n      var _a;\n\n      return schemaSelector(value, (_a = xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.xmlName) !== null && _a !== void 0 ? _a : discriminatorPropName, xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.isAttr).mapXml(value, ctxt);\n    },\n    unmapXml: function unmapXml(value, ctxt) {\n      return schemaSelector(value, discriminatorMappedPropName).unmapXml(value, ctxt);\n    },\n    validateBeforeMapXml: function validateBeforeMapXml(value, ctxt) {\n      var _a;\n\n      return schemaSelector(value, (_a = xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.xmlName) !== null && _a !== void 0 ? _a : discriminatorPropName, xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.isAttr).validateBeforeMapXml(value, ctxt);\n    }\n  };\n}\n\nfunction xmlObjectHasAttribute(value, prop) {\n  return '$' in value && typeof value.$ === 'object' && prop in value.$;\n}\n\nexport { discriminatedObject };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/schema/es/types/discriminatedObject.js"],"names":["__read","objectEntries","discriminatedObject","discriminatorMappedPropName","discriminatorPropName","discriminatorMap","defaultDiscriminator","xmlOptions","schemaSelector","value","discriminatorProp","isAttr","xmlObjectHasAttribute","discriminatorValue","$","type","map","_a","_b","v","join","ctxt","unmap","validateBeforeMap","validateBeforeUnmap","mapXml","xmlName","unmapXml","validateBeforeMapXml","prop"],"mappings":"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","sourcesContent":["import { __read } from 'tslib';\nimport { objectEntries } from '../utils.js';\n\nfunction discriminatedObject(discriminatorMappedPropName, discriminatorPropName, discriminatorMap, defaultDiscriminator, xmlOptions) {\n  var schemaSelector = function (value, discriminatorProp, isAttr) {\n    if (isAttr === void 0) {\n      isAttr = false;\n    }\n\n    if (typeof value === 'object' && value !== null && (isAttr && xmlObjectHasAttribute(value, discriminatorProp) || !isAttr && discriminatorProp in value)) {\n      var discriminatorValue = isAttr ? value.$[discriminatorProp] : value[discriminatorProp];\n\n      if (typeof discriminatorValue === 'string' && discriminatorValue in discriminatorMap) {\n        return discriminatorMap[discriminatorValue];\n      }\n    }\n\n    return discriminatorMap[defaultDiscriminator];\n  };\n\n  return {\n    type: function () {\n      return \"DiscriminatedUnion<\" + discriminatorPropName + \",[\" + objectEntries(discriminatorMap).map(function (_a) {\n        var _b = __read(_a, 2);\n\n        _b[0];\n        var v = _b[1];\n        return v.type;\n      }).join(',') + \"]>\";\n    },\n    map: function (value, ctxt) {\n      return schemaSelector(value, discriminatorPropName).map(value, ctxt);\n    },\n    unmap: function (value, ctxt) {\n      return schemaSelector(value, discriminatorMappedPropName).unmap(value, ctxt);\n    },\n    validateBeforeMap: function (value, ctxt) {\n      return schemaSelector(value, discriminatorPropName).validateBeforeMap(value, ctxt);\n    },\n    validateBeforeUnmap: function (value, ctxt) {\n      return schemaSelector(value, discriminatorMappedPropName).validateBeforeUnmap(value, ctxt);\n    },\n    mapXml: function (value, ctxt) {\n      var _a;\n\n      return schemaSelector(value, (_a = xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.xmlName) !== null && _a !== void 0 ? _a : discriminatorPropName, xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.isAttr).mapXml(value, ctxt);\n    },\n    unmapXml: function (value, ctxt) {\n      return schemaSelector(value, discriminatorMappedPropName).unmapXml(value, ctxt);\n    },\n    validateBeforeMapXml: function (value, ctxt) {\n      var _a;\n\n      return schemaSelector(value, (_a = xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.xmlName) !== null && _a !== void 0 ? _a : discriminatorPropName, xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.isAttr).validateBeforeMapXml(value, ctxt);\n    }\n  };\n}\n\nfunction xmlObjectHasAttribute(value, prop) {\n  return '$' in value && typeof value.$ === 'object' && prop in value.$;\n}\n\nexport { discriminatedObject };"]},"metadata":{},"sourceType":"module"}