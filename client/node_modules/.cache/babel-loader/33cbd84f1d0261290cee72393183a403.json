{"ast":null,"code":"import { __values } from 'tslib';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/**\r\n * Set a header in the headers map.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n * @param value Header value\r\n */\n\nfunction setHeader(headers, name, value) {\n  var realHeaderName = lookupCaseInsensitive(headers, name);\n  setHeaderInternal(headers, realHeaderName, name, value);\n}\n\nfunction setHeaderInternal(headers, realHeaderName, name, value) {\n  if (realHeaderName) {\n    delete headers[realHeaderName];\n  }\n\n  if (value) {\n    headers[name] = value;\n  }\n}\n/**\r\n * Set a header in the headers map if it is not already set.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n * @param value Header value\r\n */\n\n\nfunction setHeaderIfNotSet(headers, name, value) {\n  var realHeaderName = lookupCaseInsensitive(headers, name);\n\n  if (!realHeaderName) {\n    setHeaderInternal(headers, realHeaderName, name, value);\n  }\n}\n/**\r\n * Get header from a map of headers.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n */\n\n\nfunction getHeader(headers, name) {\n  var prop = lookupCaseInsensitive(headers, name);\n\n  if (prop) {\n    return headers[prop];\n  }\n\n  return null;\n}\n/**\r\n * Looks up and returns the matching property name from the object.\r\n *\r\n * This method returns the matching property name in the object which might or might\r\n * not have the same case as the prop argument.\r\n *\r\n * @param obj Object with string property names\r\n * @param prop Property to lookup\r\n */\n\n\nfunction lookupCaseInsensitive(obj, prop) {\n  prop = prop.toLowerCase();\n\n  for (var p in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, p) && prop === p.toLowerCase()) {\n      return p;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Merge headers\r\n *\r\n * Header names are compared using case-insensitive comparison. This method\r\n * preserves the original header name. If the headersToMerge overrides an existing\r\n * header, then the new header name (with its casing) is used.\r\n *\r\n * @param headers Headers to merge into\r\n * @param headersToMerge Headers to set\r\n */\n\n\nfunction mergeHeaders(headers, headersToMerge) {\n  var e_1, _a, e_2, _b;\n\n  var headerKeys = {};\n\n  try {\n    // Create a map of lower-cased-header-name to original-header-names\n    for (var _c = __values(Object.getOwnPropertyNames(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var headerName = _d.value;\n      headerKeys[headerName.toLowerCase()] = headerName;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  try {\n    // Override headers with new values\n    for (var _e = __values(Object.getOwnPropertyNames(headersToMerge)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var headerName = _f.value;\n      var lowerCasedName = headerName.toLowerCase();\n\n      if (headerKeys[lowerCasedName]) {\n        delete headers[headerKeys[lowerCasedName]];\n      }\n\n      headerKeys[lowerCasedName] = headerName;\n      headers[headerName] = headersToMerge[headerName];\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\r\n * Assert headers object is valid\r\n */\n\n\nfunction assertHeaders(headers) {\n  var e_3, _a;\n\n  if (headers === null || typeof headers !== 'object') {\n    throw new TypeError('Headers must be an object.');\n  }\n\n  try {\n    for (var _b = __values(Object.getOwnPropertyNames(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n\n      if (!isValidHeaderName(headerName)) {\n        throw new Error(\"\\\"\" + headerName + \"\\\" is not a valid header name.\");\n      }\n\n      var headerValue = headers[headerName];\n\n      if (typeof headerValue !== 'string') {\n        throw new TypeError(\"Header value must be string but \" + typeof headerValue + \" provided.\");\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\r\n * Return true if header name is valid\r\n * @param headerName Header name\r\n */\n\n\nfunction isValidHeaderName(headerName) {\n  return /^[\\w!#$%&'*+.^`|~-]+$/.test(headerName);\n}\n\nvar CONTENT_TYPE_HEADER = 'content-type';\nvar ACCEPT_HEADER = 'accept';\nvar CONTENT_LENGTH_HEADER = 'content-length';\nvar AUTHORIZATION_HEADER = 'authorization';\nvar FORM_URLENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nvar JSON_CONTENT_TYPE = 'application/json';\nvar TEXT_CONTENT_TYPE = 'text/plain; charset=utf-8';\nvar XML_CONTENT_TYPE = 'application/xml';\nexport { ACCEPT_HEADER, AUTHORIZATION_HEADER, CONTENT_LENGTH_HEADER, CONTENT_TYPE_HEADER, FORM_URLENCODED_CONTENT_TYPE, JSON_CONTENT_TYPE, TEXT_CONTENT_TYPE, XML_CONTENT_TYPE, assertHeaders, getHeader, isValidHeaderName, lookupCaseInsensitive, mergeHeaders, setHeader, setHeaderIfNotSet };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/core/es/http/httpHeaders.js"],"names":["__values","setHeader","headers","name","value","realHeaderName","lookupCaseInsensitive","setHeaderInternal","setHeaderIfNotSet","getHeader","prop","obj","toLowerCase","p","Object","prototype","hasOwnProperty","call","mergeHeaders","headersToMerge","e_1","_a","e_2","_b","headerKeys","_c","getOwnPropertyNames","_d","next","done","headerName","e_1_1","error","return","_e","_f","lowerCasedName","e_2_1","assertHeaders","e_3","TypeError","isValidHeaderName","Error","headerValue","e_3_1","test","CONTENT_TYPE_HEADER","ACCEPT_HEADER","CONTENT_LENGTH_HEADER","AUTHORIZATION_HEADER","FORM_URLENCODED_CONTENT_TYPE","JSON_CONTENT_TYPE","TEXT_CONTENT_TYPE","XML_CONTENT_TYPE"],"mappings":"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","sourcesContent":["import { __values } from 'tslib';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/**\r\n * Set a header in the headers map.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n * @param value Header value\r\n */\n\nfunction setHeader(headers, name, value) {\n  var realHeaderName = lookupCaseInsensitive(headers, name);\n  setHeaderInternal(headers, realHeaderName, name, value);\n}\n\nfunction setHeaderInternal(headers, realHeaderName, name, value) {\n  if (realHeaderName) {\n    delete headers[realHeaderName];\n  }\n\n  if (value) {\n    headers[name] = value;\n  }\n}\n/**\r\n * Set a header in the headers map if it is not already set.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n * @param value Header value\r\n */\n\n\nfunction setHeaderIfNotSet(headers, name, value) {\n  var realHeaderName = lookupCaseInsensitive(headers, name);\n\n  if (!realHeaderName) {\n    setHeaderInternal(headers, realHeaderName, name, value);\n  }\n}\n/**\r\n * Get header from a map of headers.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n */\n\n\nfunction getHeader(headers, name) {\n  var prop = lookupCaseInsensitive(headers, name);\n\n  if (prop) {\n    return headers[prop];\n  }\n\n  return null;\n}\n/**\r\n * Looks up and returns the matching property name from the object.\r\n *\r\n * This method returns the matching property name in the object which might or might\r\n * not have the same case as the prop argument.\r\n *\r\n * @param obj Object with string property names\r\n * @param prop Property to lookup\r\n */\n\n\nfunction lookupCaseInsensitive(obj, prop) {\n  prop = prop.toLowerCase();\n\n  for (var p in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, p) && prop === p.toLowerCase()) {\n      return p;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Merge headers\r\n *\r\n * Header names are compared using case-insensitive comparison. This method\r\n * preserves the original header name. If the headersToMerge overrides an existing\r\n * header, then the new header name (with its casing) is used.\r\n *\r\n * @param headers Headers to merge into\r\n * @param headersToMerge Headers to set\r\n */\n\n\nfunction mergeHeaders(headers, headersToMerge) {\n  var e_1, _a, e_2, _b;\n\n  var headerKeys = {};\n\n  try {\n    // Create a map of lower-cased-header-name to original-header-names\n    for (var _c = __values(Object.getOwnPropertyNames(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var headerName = _d.value;\n      headerKeys[headerName.toLowerCase()] = headerName;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  try {\n    // Override headers with new values\n    for (var _e = __values(Object.getOwnPropertyNames(headersToMerge)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var headerName = _f.value;\n      var lowerCasedName = headerName.toLowerCase();\n\n      if (headerKeys[lowerCasedName]) {\n        delete headers[headerKeys[lowerCasedName]];\n      }\n\n      headerKeys[lowerCasedName] = headerName;\n      headers[headerName] = headersToMerge[headerName];\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\r\n * Assert headers object is valid\r\n */\n\n\nfunction assertHeaders(headers) {\n  var e_3, _a;\n\n  if (headers === null || typeof headers !== 'object') {\n    throw new TypeError('Headers must be an object.');\n  }\n\n  try {\n    for (var _b = __values(Object.getOwnPropertyNames(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n\n      if (!isValidHeaderName(headerName)) {\n        throw new Error(\"\\\"\" + headerName + \"\\\" is not a valid header name.\");\n      }\n\n      var headerValue = headers[headerName];\n\n      if (typeof headerValue !== 'string') {\n        throw new TypeError(\"Header value must be string but \" + typeof headerValue + \" provided.\");\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\r\n * Return true if header name is valid\r\n * @param headerName Header name\r\n */\n\n\nfunction isValidHeaderName(headerName) {\n  return /^[\\w!#$%&'*+.^`|~-]+$/.test(headerName);\n}\n\nvar CONTENT_TYPE_HEADER = 'content-type';\nvar ACCEPT_HEADER = 'accept';\nvar CONTENT_LENGTH_HEADER = 'content-length';\nvar AUTHORIZATION_HEADER = 'authorization';\nvar FORM_URLENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nvar JSON_CONTENT_TYPE = 'application/json';\nvar TEXT_CONTENT_TYPE = 'text/plain; charset=utf-8';\nvar XML_CONTENT_TYPE = 'application/xml';\nexport { ACCEPT_HEADER, AUTHORIZATION_HEADER, CONTENT_LENGTH_HEADER, CONTENT_TYPE_HEADER, FORM_URLENCODED_CONTENT_TYPE, JSON_CONTENT_TYPE, TEXT_CONTENT_TYPE, XML_CONTENT_TYPE, assertHeaders, getHeader, isValidHeaderName, lookupCaseInsensitive, mergeHeaders, setHeader, setHeaderIfNotSet };"]},"metadata":{},"sourceType":"module"}