{"ast":null,"code":"import flatMap from 'lodash.flatmap';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/** Marker for skipping URL-encoding when used with Path templating */\n\nvar SkipEncode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function SkipEncode(value) {\n    this.value = value;\n  }\n\n  return SkipEncode;\n}();\n/**\r\n * URL path templating method.\r\n *\r\n * Template arguments of array type are imploded using the path separator and\r\n * individual elements are URL-encoded.\r\n *\r\n * Template arguments are URL-encoded unless wrapped in a SkipEncode instance.\r\n */\n\n\nfunction pathTemplate(strings) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var values = flatMap(interweaveArrays(strings.map(function (s) {\n    return new SkipEncode(s);\n  }), args), encodePathTemplateSegment);\n  var pathSegment = values.join('');\n  return pathSegment;\n}\n\nfunction encodePathTemplateSegment(value) {\n  var skipEncode = false;\n\n  var encode = function (m) {\n    return skipEncode || typeof m === 'bigint' ? m.toString() : encodeURIComponent(m);\n  };\n\n  if (value instanceof SkipEncode) {\n    value = value.value;\n    skipEncode = true;\n  }\n\n  return Array.isArray(value) ? value.map(encode).join('/') : [encode(value)];\n}\n\nfunction interweaveArrays(a, b) {\n  var min = Math.min(a.length, b.length);\n  return Array.apply(null, new Array(min)).reduce(function (result, _, index) {\n    result.push(a[index], b[index]);\n    return result;\n  }, []).concat((a.length > min ? a : b).slice(min));\n}\n\nexport { SkipEncode, pathTemplate };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/core/es/http/pathTemplate.js"],"names":["flatMap","SkipEncode","value","pathTemplate","strings","args","_i","arguments","length","values","interweaveArrays","map","s","encodePathTemplateSegment","pathSegment","join","skipEncode","encode","m","toString","encodeURIComponent","Array","isArray","a","b","min","Math","apply","reduce","result","_","index","push","concat","slice"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAIC,UAAU;AACd;;AAEA;AACA,YAAY;AACV,WAASA,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAED,SAAOD,UAAP;AACD,CAND,EAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC5CD,IAAAA,IAAI,CAACC,EAAE,GAAG,CAAN,CAAJ,GAAeC,SAAS,CAACD,EAAD,CAAxB;AACD;;AAED,MAAIG,MAAM,GAAGT,OAAO,CAACU,gBAAgB,CAACN,OAAO,CAACO,GAAR,CAAY,UAAUC,CAAV,EAAa;AAC7D,WAAO,IAAIX,UAAJ,CAAeW,CAAf,CAAP;AACD,GAFqC,CAAD,EAEjCP,IAFiC,CAAjB,EAETQ,yBAFS,CAApB;AAGA,MAAIC,WAAW,GAAGL,MAAM,CAACM,IAAP,CAAY,EAAZ,CAAlB;AACA,SAAOD,WAAP;AACD;;AAED,SAASD,yBAAT,CAAmCX,KAAnC,EAA0C;AACxC,MAAIc,UAAU,GAAG,KAAjB;;AAEA,MAAIC,MAAM,GAAG,UAAUC,CAAV,EAAa;AACxB,WAAOF,UAAU,IAAI,OAAOE,CAAP,KAAa,QAA3B,GAAsCA,CAAC,CAACC,QAAF,EAAtC,GAAqDC,kBAAkB,CAACF,CAAD,CAA9E;AACD,GAFD;;AAIA,MAAIhB,KAAK,YAAYD,UAArB,EAAiC;AAC/BC,IAAAA,KAAK,GAAGA,KAAK,CAACA,KAAd;AACAc,IAAAA,UAAU,GAAG,IAAb;AACD;;AAED,SAAOK,KAAK,CAACC,OAAN,CAAcpB,KAAd,IAAuBA,KAAK,CAACS,GAAN,CAAUM,MAAV,EAAkBF,IAAlB,CAAuB,GAAvB,CAAvB,GAAqD,CAACE,MAAM,CAACf,KAAD,CAAP,CAA5D;AACD;;AAED,SAASQ,gBAAT,CAA0Ba,CAA1B,EAA6BC,CAA7B,EAAgC;AAC9B,MAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASF,CAAC,CAACf,MAAX,EAAmBgB,CAAC,CAAChB,MAArB,CAAV;AACA,SAAOa,KAAK,CAACM,KAAN,CAAY,IAAZ,EAAkB,IAAIN,KAAJ,CAAUI,GAAV,CAAlB,EAAkCG,MAAlC,CAAyC,UAAUC,MAAV,EAAkBC,CAAlB,EAAqBC,KAArB,EAA4B;AAC1EF,IAAAA,MAAM,CAACG,IAAP,CAAYT,CAAC,CAACQ,KAAD,CAAb,EAAsBP,CAAC,CAACO,KAAD,CAAvB;AACA,WAAOF,MAAP;AACD,GAHM,EAGJ,EAHI,EAGAI,MAHA,CAGO,CAACV,CAAC,CAACf,MAAF,GAAWiB,GAAX,GAAiBF,CAAjB,GAAqBC,CAAtB,EAAyBU,KAAzB,CAA+BT,GAA/B,CAHP,CAAP;AAID;;AAED,SAASxB,UAAT,EAAqBE,YAArB","sourcesContent":["import flatMap from 'lodash.flatmap';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/** Marker for skipping URL-encoding when used with Path templating */\n\nvar SkipEncode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function SkipEncode(value) {\n    this.value = value;\n  }\n\n  return SkipEncode;\n}();\n/**\r\n * URL path templating method.\r\n *\r\n * Template arguments of array type are imploded using the path separator and\r\n * individual elements are URL-encoded.\r\n *\r\n * Template arguments are URL-encoded unless wrapped in a SkipEncode instance.\r\n */\n\n\nfunction pathTemplate(strings) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var values = flatMap(interweaveArrays(strings.map(function (s) {\n    return new SkipEncode(s);\n  }), args), encodePathTemplateSegment);\n  var pathSegment = values.join('');\n  return pathSegment;\n}\n\nfunction encodePathTemplateSegment(value) {\n  var skipEncode = false;\n\n  var encode = function (m) {\n    return skipEncode || typeof m === 'bigint' ? m.toString() : encodeURIComponent(m);\n  };\n\n  if (value instanceof SkipEncode) {\n    value = value.value;\n    skipEncode = true;\n  }\n\n  return Array.isArray(value) ? value.map(encode).join('/') : [encode(value)];\n}\n\nfunction interweaveArrays(a, b) {\n  var min = Math.min(a.length, b.length);\n  return Array.apply(null, new Array(min)).reduce(function (result, _, index) {\n    result.push(a[index], b[index]);\n    return result;\n  }, []).concat((a.length > min ? a : b).slice(min));\n}\n\nexport { SkipEncode, pathTemplate };"]},"metadata":{},"sourceType":"module"}