{"ast":null,"code":"import { useState, useRef, useCallback, useEffect, useLayoutEffect } from 'react';\nimport warning from 'tiny-warning';\nimport raf from 'raf';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar noop = function noop() {};\n\nfunction getElementHeight(el) {\n  if (!(el === null || el === void 0 ? void 0 : el.current)) {\n    process.env.NODE_ENV !== \"production\" ? warning(true, \"useCollapse was not able to find a ref to the collapse element via `getCollapseProps`. Ensure that the element exposes its `ref` prop. If it exposes the ref prop under a different name (like `innerRef`), use the `refKey` property to change it. Example:\\n\\n{...getCollapseProps({refKey: 'innerRef'})}\") : void 0;\n    return 'auto';\n  }\n\n  return el.current.scrollHeight;\n} // Helper function for render props. Sets a function to be called, plus any additional functions passed in\n\n\nvar callAll = function callAll() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return fns.forEach(function (fn) {\n      return fn && fn.apply(void 0, args);\n    });\n  };\n}; // https://github.com/mui-org/material-ui/blob/da362266f7c137bf671d7e8c44c84ad5cfc0e9e2/packages/material-ui/src/styles/transitions.js#L89-L98\n\n\nfunction getAutoHeightDuration(height) {\n  if (!height || typeof height === 'string') {\n    return 0;\n  }\n\n  var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n\n  return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);\n}\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === 'function') {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (error) {\n      throw new Error(\"Cannot assign value \\\"\" + value + \"\\\" to ref \\\"\" + ref + \"\\\"\");\n    }\n  }\n}\n/**\r\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\r\n * dealing with components that need an explicit ref for DOM calculations but\r\n * also forwards refs assigned by an app.\r\n *\r\n * @param refs Refs to fork\r\n */\n\n\nfunction mergeRefs() {\n  for (var _len3 = arguments.length, refs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    refs[_key3] = arguments[_key3];\n  }\n\n  if (refs.every(function (ref) {\n    return ref == null;\n  })) {\n    return null;\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      assignRef(ref, node);\n    });\n  };\n}\n\nfunction useControlledState(isExpanded, defaultExpanded) {\n  var _useState = useState(defaultExpanded || false),\n      stateExpanded = _useState[0],\n      setStateExpanded = _useState[1];\n\n  var initiallyControlled = useRef(isExpanded != null);\n  var expanded = initiallyControlled.current ? isExpanded : stateExpanded;\n  var setExpanded = useCallback(function (n) {\n    if (!initiallyControlled.current) {\n      setStateExpanded(n);\n    }\n  }, []);\n  useEffect(function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!(initiallyControlled.current && isExpanded == null), 'useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(!initiallyControlled.current && isExpanded != null), 'useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.') : void 0;\n  }, [isExpanded]);\n  return [expanded, setExpanded];\n}\n\nfunction useEffectAfterMount(cb, dependencies) {\n  var justMounted = useRef(true); // eslint-disable-next-line consistent-return\n\n  useEffect(function () {\n    if (!justMounted.current) {\n      return cb();\n    }\n\n    justMounted.current = false; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n/**\r\n * Taken from Reach\r\n * https://github.com/reach/reach-ui/blob/d2b88c50caf52f473a7d20a4493e39e3c5e95b7b/packages/auto-id\r\n *\r\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\r\n *\r\n * Note: The returned ID will initially be `null` and will update after a\r\n * component mounts. Users may need to supply their own ID if they need\r\n * consistent values for SSR.\r\n *\r\n * @see Docs https://reach.tech/auto-id\r\n */\n\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nvar serverHandoffComplete = false;\nvar id = 0;\n\nvar genId = function genId() {\n  return ++id;\n};\n\nfunction useUniqueId(idFromProps) {\n  /*\r\n   * If this instance isn't part of the initial render, we don't have to do the\r\n   * double render/patch-up dance. We can just generate the ID and return it.\r\n   */\n  var initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  var _useState2 = useState(initialId),\n      id = _useState2[0],\n      setId = _useState2[1];\n\n  useIsomorphicLayoutEffect(function () {\n    if (id === null) {\n      /*\r\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\r\n       * rendering flicker, though it'll make the first render slower (unlikely\r\n       * to matter, but you're welcome to measure your app and let us know if\r\n       * it's a problem).\r\n       */\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (serverHandoffComplete === false) {\n      /*\r\n       * Flag all future uses of `useId` to skip the update dance. This is in\r\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\r\n       * accidentally bail out of the patch-up dance prematurely.\r\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n}\n\nfunction usePaddingWarning(element) {\n  // @ts-ignore\n  var warn = function warn(el) {};\n\n  if (process.env.NODE_ENV !== \"production\") {\n    warn = function warn(el) {\n      if (!(el === null || el === void 0 ? void 0 : el.current)) {\n        return;\n      }\n\n      var _window$getComputedSt = window.getComputedStyle(el.current),\n          paddingTop = _window$getComputedSt.paddingTop,\n          paddingBottom = _window$getComputedSt.paddingBottom;\n\n      var hasPadding = paddingTop && paddingTop !== '0px' || paddingBottom && paddingBottom !== '0px';\n      process.env.NODE_ENV !== \"production\" ? warning(!hasPadding, 'react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.') : void 0;\n    };\n  }\n\n  useEffect(function () {\n    warn(element);\n  }, [element]);\n}\n\nvar easeInOut = 'cubic-bezier(0.4, 0, 0.2, 1)';\n\nfunction useCollapse(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      duration = _ref.duration,\n      _ref$easing = _ref.easing,\n      easing = _ref$easing === void 0 ? easeInOut : _ref$easing,\n      _ref$collapseStyles = _ref.collapseStyles,\n      collapseStyles = _ref$collapseStyles === void 0 ? {} : _ref$collapseStyles,\n      _ref$expandStyles = _ref.expandStyles,\n      expandStyles = _ref$expandStyles === void 0 ? {} : _ref$expandStyles,\n      _ref$onExpandStart = _ref.onExpandStart,\n      onExpandStart = _ref$onExpandStart === void 0 ? noop : _ref$onExpandStart,\n      _ref$onExpandEnd = _ref.onExpandEnd,\n      onExpandEnd = _ref$onExpandEnd === void 0 ? noop : _ref$onExpandEnd,\n      _ref$onCollapseStart = _ref.onCollapseStart,\n      onCollapseStart = _ref$onCollapseStart === void 0 ? noop : _ref$onCollapseStart,\n      _ref$onCollapseEnd = _ref.onCollapseEnd,\n      onCollapseEnd = _ref$onCollapseEnd === void 0 ? noop : _ref$onCollapseEnd,\n      configIsExpanded = _ref.isExpanded,\n      _ref$defaultExpanded = _ref.defaultExpanded,\n      defaultExpanded = _ref$defaultExpanded === void 0 ? false : _ref$defaultExpanded,\n      initialConfig = _objectWithoutPropertiesLoose(_ref, [\"duration\", \"easing\", \"collapseStyles\", \"expandStyles\", \"onExpandStart\", \"onExpandEnd\", \"onCollapseStart\", \"onCollapseEnd\", \"isExpanded\", \"defaultExpanded\"]);\n\n  var _useControlledState = useControlledState(configIsExpanded, defaultExpanded),\n      isExpanded = _useControlledState[0],\n      setExpanded = _useControlledState[1];\n\n  var uniqueId = useUniqueId();\n  var el = useRef(null);\n  usePaddingWarning(el);\n  var collapsedHeight = (initialConfig.collapsedHeight || 0) + \"px\";\n  var collapsedStyles = {\n    display: collapsedHeight === '0px' ? 'none' : 'block',\n    height: collapsedHeight,\n    overflow: 'hidden'\n  };\n\n  var _useState = useState(isExpanded ? {} : collapsedStyles),\n      styles = _useState[0],\n      setStyles = _useState[1];\n\n  var mergeStyles = useCallback(function (newStyles) {\n    setStyles(function (oldStyles) {\n      return _extends({}, oldStyles, newStyles);\n    });\n  }, []);\n\n  function getTransitionStyles(height) {\n    var _duration = duration || getAutoHeightDuration(height);\n\n    return {\n      transition: \"height \" + _duration + \"ms \" + easing\n    };\n  }\n\n  useEffectAfterMount(function () {\n    if (isExpanded) {\n      raf(function () {\n        onExpandStart();\n        mergeStyles(_extends({}, expandStyles, {\n          willChange: 'height',\n          display: 'block',\n          overflow: 'hidden'\n        }));\n        raf(function () {\n          var height = getElementHeight(el);\n          mergeStyles(_extends({}, getTransitionStyles(height), {\n            height: height\n          }));\n        });\n      });\n    } else {\n      raf(function () {\n        onCollapseStart();\n        var height = getElementHeight(el);\n        mergeStyles(_extends({}, collapseStyles, getTransitionStyles(height), {\n          willChange: 'height',\n          height: height\n        }));\n        raf(function () {\n          mergeStyles({\n            height: collapsedHeight,\n            overflow: 'hidden'\n          });\n        });\n      });\n    }\n  }, [isExpanded]);\n\n  var handleTransitionEnd = function handleTransitionEnd(e) {\n    // Sometimes onTransitionEnd is triggered by another transition,\n    // such as a nested collapse panel transitioning. But we only\n    // want to handle this if this component's element is transitioning\n    if (e.target !== el.current || e.propertyName !== 'height') {\n      return;\n    } // The height comparisons below are a final check before\n    // completing the transition\n    // Sometimes this callback is run even though we've already begun\n    // transitioning the other direction\n    // The conditions give us the opportunity to bail out,\n    // which will prevent the collapsed content from flashing on the screen\n\n\n    if (isExpanded) {\n      var height = getElementHeight(el); // If the height at the end of the transition\n      // matches the height we're animating to,\n\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        // If the heights don't match, this could be due the height\n        // of the content changing mid-transition\n        mergeStyles({\n          height: height\n        });\n      }\n\n      onExpandEnd(); // If the height we should be animating to matches the collapsed height,\n      // it's safe to apply the collapsed overrides\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onCollapseEnd();\n    }\n  };\n\n  function getToggleProps(_temp2) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$disabled = _ref2.disabled,\n        disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,\n        _ref2$onClick = _ref2.onClick,\n        onClick = _ref2$onClick === void 0 ? noop : _ref2$onClick,\n        rest = _objectWithoutPropertiesLoose(_ref2, [\"disabled\", \"onClick\"]);\n\n    return _extends({\n      type: 'button',\n      role: 'button',\n      id: \"react-collapsed-toggle-\" + uniqueId,\n      'aria-controls': \"react-collapsed-panel-\" + uniqueId,\n      'aria-expanded': isExpanded,\n      tabIndex: 0,\n      disabled: disabled\n    }, rest, {\n      onClick: disabled ? noop : callAll(onClick, function () {\n        return setExpanded(function (n) {\n          return !n;\n        });\n      })\n    });\n  }\n\n  function getCollapseProps(_temp3) {\n    var _extends2;\n\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        _ref3$style = _ref3.style,\n        style = _ref3$style === void 0 ? {} : _ref3$style,\n        _ref3$onTransitionEnd = _ref3.onTransitionEnd,\n        onTransitionEnd = _ref3$onTransitionEnd === void 0 ? noop : _ref3$onTransitionEnd,\n        _ref3$refKey = _ref3.refKey,\n        refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n        rest = _objectWithoutPropertiesLoose(_ref3, [\"style\", \"onTransitionEnd\", \"refKey\"]);\n\n    var theirRef = rest[refKey];\n    return _extends({\n      id: \"react-collapsed-panel-\" + uniqueId,\n      'aria-hidden': !isExpanded\n    }, rest, (_extends2 = {}, _extends2[refKey] = mergeRefs(el, theirRef), _extends2.onTransitionEnd = callAll(handleTransitionEnd, onTransitionEnd), _extends2.style = _extends({\n      boxSizing: 'border-box'\n    }, style, styles), _extends2));\n  }\n\n  return {\n    getToggleProps: getToggleProps,\n    getCollapseProps: getCollapseProps,\n    isExpanded: isExpanded,\n    setExpanded: setExpanded\n  };\n}\n\nexport default useCollapse;","map":{"version":3,"sources":["../src/utils.ts","../src/index.ts"],"names":["noop","getElementHeight","el","callAll","fns","args","fn","getAutoHeightDuration","height","constant","Math","assignRef","ref","value","mergeRefs","refs","useControlledState","isExpanded","defaultExpanded","stateExpanded","setStateExpanded","useState","initiallyControlled","useRef","expanded","setExpanded","useCallback","useEffect","useEffectAfterMount","cb","dependencies","justMounted","useIsomorphicLayoutEffect","serverHandoffComplete","id","genId","useUniqueId","idFromProps","initialId","setId","String","usePaddingWarning","element","warn","paddingTop","paddingBottom","window","hasPadding","easeInOut","useCollapse","duration","easing","collapseStyles","expandStyles","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","configIsExpanded","initialConfig","uniqueId","collapsedHeight","collapsedStyles","display","overflow","styles","setStyles","mergeStyles","_duration","transition","raf","willChange","getTransitionStyles","handleTransitionEnd","e","disabled","onClick","rest","type","role","tabIndex","style","onTransitionEnd","refKey","theirRef","boxSizing","getToggleProps","getCollapseProps"],"mappings":"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","sourcesContent":["import {\n  RefObject,\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useLayoutEffect,\n} from 'react';\nimport warning from 'tiny-warning';\nimport { AssignableRef } from './types';\n\ntype AnyFunction = (...args: any[]) => unknown;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = (): void => {};\n\nexport function getElementHeight(\n  el: RefObject<HTMLElement> | { current?: { scrollHeight: number } }\n): string | number {\n  if (!el?.current) {\n    warning(\n      true,\n      `useCollapse was not able to find a ref to the collapse element via \\`getCollapseProps\\`. Ensure that the element exposes its \\`ref\\` prop. If it exposes the ref prop under a different name (like \\`innerRef\\`), use the \\`refKey\\` property to change it. Example:\n\n{...getCollapseProps({refKey: 'innerRef'})}`\n    );\n    return 'auto';\n  }\n  return el.current.scrollHeight;\n}\n\n// Helper function for render props. Sets a function to be called, plus any additional functions passed in\nexport const callAll = (...fns: AnyFunction[]) => (...args: any[]): void =>\n  fns.forEach((fn) => fn && fn(...args));\n\n// https://github.com/mui-org/material-ui/blob/da362266f7c137bf671d7e8c44c84ad5cfc0e9e2/packages/material-ui/src/styles/transitions.js#L89-L98\nexport function getAutoHeightDuration(height: number | string): number {\n  if (!height || typeof height === 'string') {\n    return 0;\n  }\n\n  const constant = height / 36;\n\n  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}\n\nexport function assignRef<RefValueType = any>(\n  ref: AssignableRef<RefValueType> | null | undefined,\n  value: any\n) {\n  if (ref == null) return;\n  if (typeof ref === 'function') {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`);\n    }\n  }\n}\n\n/**\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\n * dealing with components that need an explicit ref for DOM calculations but\n * also forwards refs assigned by an app.\n *\n * @param refs Refs to fork\n */\nexport function mergeRefs<RefValueType = any>(\n  ...refs: (AssignableRef<RefValueType> | null | undefined)[]\n) {\n  if (refs.every((ref) => ref == null)) {\n    return null;\n  }\n  return (node: any) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\n\nexport function useControlledState(\n  isExpanded?: boolean,\n  defaultExpanded?: boolean\n): [boolean, React.Dispatch<React.SetStateAction<boolean>>] {\n  const [stateExpanded, setStateExpanded] = useState(defaultExpanded || false);\n  const initiallyControlled = useRef(isExpanded != null);\n  const expanded = initiallyControlled.current\n    ? (isExpanded as boolean)\n    : stateExpanded;\n  const setExpanded = useCallback((n) => {\n    if (!initiallyControlled.current) {\n      setStateExpanded(n);\n    }\n  }, []);\n\n  useEffect(() => {\n    warning(\n      !(initiallyControlled.current && isExpanded == null),\n      'useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.'\n    );\n    warning(\n      !(!initiallyControlled.current && isExpanded != null),\n      'useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.'\n    );\n  }, [isExpanded]);\n\n  return [expanded, setExpanded];\n}\n\nexport function useEffectAfterMount(\n  cb: () => void,\n  dependencies: unknown[]\n): void {\n  const justMounted = useRef(true);\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (!justMounted.current) {\n      return cb();\n    }\n    justMounted.current = false;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n\n/**\n * Taken from Reach\n * https://github.com/reach/reach-ui/blob/d2b88c50caf52f473a7d20a4493e39e3c5e95b7b/packages/auto-id\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reach.tech/auto-id\n */\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nlet serverHandoffComplete = false;\nlet id = 0;\nconst genId = () => ++id;\nexport function useUniqueId(idFromProps?: string | null) {\n  /*\n   * If this instance isn't part of the initial render, we don't have to do the\n   * double render/patch-up dance. We can just generate the ID and return it.\n   */\n  const initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  const [id, setId] = useState(initialId);\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === null) {\n      /*\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n       * rendering flicker, though it'll make the first render slower (unlikely\n       * to matter, but you're welcome to measure your app and let us know if\n       * it's a problem).\n       */\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (serverHandoffComplete === false) {\n      /*\n       * Flag all future uses of `useId` to skip the update dance. This is in\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n       * accidentally bail out of the patch-up dance prematurely.\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n}\n\nexport function usePaddingWarning(element: RefObject<HTMLElement>): void {\n  // @ts-ignore\n  let warn = (el?: RefObject<HTMLElement>): void => {};\n\n  if (__DEV__) {\n    warn = (el) => {\n      if (!el?.current) {\n        return;\n      }\n      const { paddingTop, paddingBottom } = window.getComputedStyle(el.current);\n      const hasPadding =\n        (paddingTop && paddingTop !== '0px') ||\n        (paddingBottom && paddingBottom !== '0px');\n\n      warning(\n        !hasPadding,\n        'react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.'\n      );\n    };\n  }\n\n  useEffect(() => {\n    warn(element);\n  }, [element]);\n}\n","import {\n  useState,\n  useRef,\n  useCallback,\n  TransitionEvent,\n  CSSProperties,\n} from 'react';\nimport {\n  noop,\n  callAll,\n  getElementHeight,\n  getAutoHeightDuration,\n  mergeRefs,\n  usePaddingWarning,\n  useUniqueId,\n  useEffectAfterMount,\n  useControlledState,\n} from './utils';\nimport {\n  UseCollapseInput,\n  UseCollapseOutput,\n  GetCollapsePropsOutput,\n  GetCollapsePropsInput,\n  GetTogglePropsOutput,\n  GetTogglePropsInput,\n} from './types';\nimport raf from 'raf';\n\nconst easeInOut = 'cubic-bezier(0.4, 0, 0.2, 1)';\n\nexport default function useCollapse({\n  duration,\n  easing = easeInOut,\n  collapseStyles = {},\n  expandStyles = {},\n  onExpandStart = noop,\n  onExpandEnd = noop,\n  onCollapseStart = noop,\n  onCollapseEnd = noop,\n  isExpanded: configIsExpanded,\n  defaultExpanded = false,\n  ...initialConfig\n}: UseCollapseInput = {}): UseCollapseOutput {\n  const [isExpanded, setExpanded] = useControlledState(\n    configIsExpanded,\n    defaultExpanded\n  );\n  const uniqueId = useUniqueId();\n  const el = useRef<HTMLElement | null>(null);\n  usePaddingWarning(el);\n  const collapsedHeight = `${initialConfig.collapsedHeight || 0}px`;\n  const collapsedStyles = {\n    display: collapsedHeight === '0px' ? 'none' : 'block',\n    height: collapsedHeight,\n    overflow: 'hidden',\n  };\n  const [styles, setStyles] = useState<CSSProperties>(\n    isExpanded ? {} : collapsedStyles\n  );\n  const mergeStyles = useCallback((newStyles: {}): void => {\n    setStyles((oldStyles) => ({ ...oldStyles, ...newStyles }));\n  }, []);\n\n  function getTransitionStyles(\n    height: number | string\n  ): { transition: string } {\n    const _duration = duration || getAutoHeightDuration(height);\n    return {\n      transition: `height ${_duration}ms ${easing}`,\n    };\n  }\n\n  useEffectAfterMount(() => {\n    if (isExpanded) {\n      raf(() => {\n        onExpandStart();\n        mergeStyles({\n          ...expandStyles,\n          willChange: 'height',\n          display: 'block',\n          overflow: 'hidden',\n        });\n        raf(() => {\n          const height = getElementHeight(el);\n          mergeStyles({\n            ...getTransitionStyles(height),\n            height,\n          });\n        });\n      });\n    } else {\n      raf(() => {\n        onCollapseStart();\n        const height = getElementHeight(el);\n        mergeStyles({\n          ...collapseStyles,\n          ...getTransitionStyles(height),\n          willChange: 'height',\n          height,\n        });\n        raf(() => {\n          mergeStyles({\n            height: collapsedHeight,\n            overflow: 'hidden',\n          });\n        });\n      });\n    }\n  }, [isExpanded]);\n\n  const handleTransitionEnd = (e: TransitionEvent): void => {\n    // Sometimes onTransitionEnd is triggered by another transition,\n    // such as a nested collapse panel transitioning. But we only\n    // want to handle this if this component's element is transitioning\n    if (e.target !== el.current || e.propertyName !== 'height') {\n      return;\n    }\n\n    // The height comparisons below are a final check before\n    // completing the transition\n    // Sometimes this callback is run even though we've already begun\n    // transitioning the other direction\n    // The conditions give us the opportunity to bail out,\n    // which will prevent the collapsed content from flashing on the screen\n    if (isExpanded) {\n      const height = getElementHeight(el);\n\n      // If the height at the end of the transition\n      // matches the height we're animating to,\n      if (height === styles.height) {\n        setStyles({});\n      } else {\n        // If the heights don't match, this could be due the height\n        // of the content changing mid-transition\n        mergeStyles({ height });\n      }\n\n      onExpandEnd();\n\n      // If the height we should be animating to matches the collapsed height,\n      // it's safe to apply the collapsed overrides\n    } else if (styles.height === collapsedHeight) {\n      setStyles(collapsedStyles);\n      onCollapseEnd();\n    }\n  };\n\n  function getToggleProps({\n    disabled = false,\n    onClick = noop,\n    ...rest\n  }: GetTogglePropsInput = {}): GetTogglePropsOutput {\n    return {\n      type: 'button',\n      role: 'button',\n      id: `react-collapsed-toggle-${uniqueId}`,\n      'aria-controls': `react-collapsed-panel-${uniqueId}`,\n      'aria-expanded': isExpanded,\n      tabIndex: 0,\n      disabled,\n      ...rest,\n      onClick: disabled ? noop : callAll(onClick, () => setExpanded((n) => !n)),\n    };\n  }\n\n  function getCollapseProps({\n    style = {},\n    onTransitionEnd = noop,\n    refKey = 'ref',\n    ...rest\n  }: GetCollapsePropsInput = {}): GetCollapsePropsOutput {\n    const theirRef: any = rest[refKey];\n    return {\n      id: `react-collapsed-panel-${uniqueId}`,\n      'aria-hidden': !isExpanded,\n      ...rest,\n      [refKey]: mergeRefs(el, theirRef),\n      onTransitionEnd: callAll(handleTransitionEnd, onTransitionEnd),\n      style: {\n        boxSizing: 'border-box',\n        // additional styles passed, e.g. getCollapseProps({style: {}})\n        ...style,\n        // style overrides from state\n        ...styles,\n      },\n    };\n  }\n\n  return {\n    getToggleProps,\n    getCollapseProps,\n    isExpanded,\n    setExpanded,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}