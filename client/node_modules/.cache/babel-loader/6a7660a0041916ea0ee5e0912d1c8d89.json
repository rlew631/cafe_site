{"ast":null,"code":"import { toValidator, createSymmetricSchema, literalToString, identityFn } from '../utils.js';\n\nfunction createEnumChecker(enumVariable) {\n  var enumValues = Object.values(enumVariable);\n  return function (value) {\n    return typeof value === 'string' && enumValues.includes(value);\n  };\n}\n/**\r\n * Create a schema for a string enumeration.\r\n */\n\n\nfunction stringEnum(enumVariable) {\n  var validate = toValidator(createEnumChecker(enumVariable));\n  return createSymmetricSchema({\n    type: \"Enum<\" + Object.values(enumVariable).map(literalToString).join(',') + \">\",\n    map: identityFn,\n    validate: validate\n  });\n}\n\nexport { stringEnum };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/schema/es/types/stringEnum.js"],"names":["toValidator","createSymmetricSchema","literalToString","identityFn","createEnumChecker","enumVariable","enumValues","Object","values","value","includes","stringEnum","validate","type","map","join"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,qBAAtB,EAA6CC,eAA7C,EAA8DC,UAA9D,QAAgF,aAAhF;;AAEA,SAASC,iBAAT,CAA2BC,YAA3B,EAAyC;AACvC,MAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,YAAd,CAAjB;AACA,SAAO,UAAUI,KAAV,EAAiB;AACtB,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BH,UAAU,CAACI,QAAX,CAAoBD,KAApB,CAApC;AACD,GAFD;AAGD;AACD;AACA;AACA;;;AAGA,SAASE,UAAT,CAAoBN,YAApB,EAAkC;AAChC,MAAIO,QAAQ,GAAGZ,WAAW,CAACI,iBAAiB,CAACC,YAAD,CAAlB,CAA1B;AACA,SAAOJ,qBAAqB,CAAC;AAC3BY,IAAAA,IAAI,EAAE,UAAUN,MAAM,CAACC,MAAP,CAAcH,YAAd,EAA4BS,GAA5B,CAAgCZ,eAAhC,EAAiDa,IAAjD,CAAsD,GAAtD,CAAV,GAAuE,GADlD;AAE3BD,IAAAA,GAAG,EAAEX,UAFsB;AAG3BS,IAAAA,QAAQ,EAAEA;AAHiB,GAAD,CAA5B;AAKD;;AAED,SAASD,UAAT","sourcesContent":["import { toValidator, createSymmetricSchema, literalToString, identityFn } from '../utils.js';\n\nfunction createEnumChecker(enumVariable) {\n  var enumValues = Object.values(enumVariable);\n  return function (value) {\n    return typeof value === 'string' && enumValues.includes(value);\n  };\n}\n/**\r\n * Create a schema for a string enumeration.\r\n */\n\n\nfunction stringEnum(enumVariable) {\n  var validate = toValidator(createEnumChecker(enumVariable));\n  return createSymmetricSchema({\n    type: \"Enum<\" + Object.values(enumVariable).map(literalToString).join(',') + \">\",\n    map: identityFn,\n    validate: validate\n  });\n}\n\nexport { stringEnum };"]},"metadata":{},"sourceType":"module"}