{"ast":null,"code":"import { literalToString } from '../utils.js';\n/**\r\n * Create a 'defaults' schema.\r\n *\r\n * During mapping or unmapping, if the value is null or undefined, the schema\r\n * defaults to the 'defaultValue' specified in the schema.\r\n */\n\nfunction defaults(schema, defaultValue) {\n  return {\n    type: function () {\n      return \"Defaults<\" + schema.type() + \",\" + literalToString(defaultValue) + \">\";\n    },\n    validateBeforeMap: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? [] : schema.validateBeforeMap(v, ctxt);\n    },\n    validateBeforeUnmap: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? [] : schema.validateBeforeUnmap(v, ctxt);\n    },\n    map: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.map(v, ctxt);\n    },\n    unmap: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.unmap(v, ctxt);\n    },\n    validateBeforeMapXml: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? [] : schema.validateBeforeMapXml(v, ctxt);\n    },\n    mapXml: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.mapXml(v, ctxt);\n    },\n    unmapXml: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.unmapXml(v, ctxt);\n    }\n  };\n}\n\nfunction shouldDefault(value, defaultValue) {\n  return value === null || value === undefined || value === defaultValue;\n}\n\nexport { defaults };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/schema/es/types/defaults.js"],"names":["literalToString","defaults","schema","defaultValue","type","validateBeforeMap","v","ctxt","shouldDefault","validateBeforeUnmap","map","unmap","validateBeforeMapXml","mapXml","unmapXml","value","undefined"],"mappings":"AAAA,SAASA,eAAT,QAAgC,aAAhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,YAA1B,EAAwC;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAE,YAAY;AAChB,aAAO,cAAcF,MAAM,CAACE,IAAP,EAAd,GAA8B,GAA9B,GAAoCJ,eAAe,CAACG,YAAD,CAAnD,GAAoE,GAA3E;AACD,KAHI;AAILE,IAAAA,iBAAiB,EAAE,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AACpC,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiC,EAAjC,GAAsCD,MAAM,CAACG,iBAAP,CAAyBC,CAAzB,EAA4BC,IAA5B,CAA7C;AACD,KANI;AAOLE,IAAAA,mBAAmB,EAAE,UAAUH,CAAV,EAAaC,IAAb,EAAmB;AACtC,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiC,EAAjC,GAAsCD,MAAM,CAACO,mBAAP,CAA2BH,CAA3B,EAA8BC,IAA9B,CAA7C;AACD,KATI;AAULG,IAAAA,GAAG,EAAE,UAAUJ,CAAV,EAAaC,IAAb,EAAmB;AACtB,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiCA,YAAjC,GAAgDD,MAAM,CAACQ,GAAP,CAAWJ,CAAX,EAAcC,IAAd,CAAvD;AACD,KAZI;AAaLI,IAAAA,KAAK,EAAE,UAAUL,CAAV,EAAaC,IAAb,EAAmB;AACxB,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiCA,YAAjC,GAAgDD,MAAM,CAACS,KAAP,CAAaL,CAAb,EAAgBC,IAAhB,CAAvD;AACD,KAfI;AAgBLK,IAAAA,oBAAoB,EAAE,UAAUN,CAAV,EAAaC,IAAb,EAAmB;AACvC,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiC,EAAjC,GAAsCD,MAAM,CAACU,oBAAP,CAA4BN,CAA5B,EAA+BC,IAA/B,CAA7C;AACD,KAlBI;AAmBLM,IAAAA,MAAM,EAAE,UAAUP,CAAV,EAAaC,IAAb,EAAmB;AACzB,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiCA,YAAjC,GAAgDD,MAAM,CAACW,MAAP,CAAcP,CAAd,EAAiBC,IAAjB,CAAvD;AACD,KArBI;AAsBLO,IAAAA,QAAQ,EAAE,UAAUR,CAAV,EAAaC,IAAb,EAAmB;AAC3B,aAAOC,aAAa,CAACF,CAAD,EAAIH,YAAJ,CAAb,GAAiCA,YAAjC,GAAgDD,MAAM,CAACY,QAAP,CAAgBR,CAAhB,EAAmBC,IAAnB,CAAvD;AACD;AAxBI,GAAP;AA0BD;;AAED,SAASC,aAAT,CAAuBO,KAAvB,EAA8BZ,YAA9B,EAA4C;AAC1C,SAAOY,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyCD,KAAK,KAAKZ,YAA1D;AACD;;AAED,SAASF,QAAT","sourcesContent":["import { literalToString } from '../utils.js';\n/**\r\n * Create a 'defaults' schema.\r\n *\r\n * During mapping or unmapping, if the value is null or undefined, the schema\r\n * defaults to the 'defaultValue' specified in the schema.\r\n */\n\nfunction defaults(schema, defaultValue) {\n  return {\n    type: function () {\n      return \"Defaults<\" + schema.type() + \",\" + literalToString(defaultValue) + \">\";\n    },\n    validateBeforeMap: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? [] : schema.validateBeforeMap(v, ctxt);\n    },\n    validateBeforeUnmap: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? [] : schema.validateBeforeUnmap(v, ctxt);\n    },\n    map: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.map(v, ctxt);\n    },\n    unmap: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.unmap(v, ctxt);\n    },\n    validateBeforeMapXml: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? [] : schema.validateBeforeMapXml(v, ctxt);\n    },\n    mapXml: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.mapXml(v, ctxt);\n    },\n    unmapXml: function (v, ctxt) {\n      return shouldDefault(v, defaultValue) ? defaultValue : schema.unmapXml(v, ctxt);\n    }\n  };\n}\n\nfunction shouldDefault(value, defaultValue) {\n  return value === null || value === undefined || value === defaultValue;\n}\n\nexport { defaults };"]},"metadata":{},"sourceType":"module"}