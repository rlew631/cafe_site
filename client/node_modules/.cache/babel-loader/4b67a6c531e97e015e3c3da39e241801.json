{"ast":null,"code":"import { __spreadArray, __read } from 'tslib';\nimport { objectEntries } from '../utils.js';\n/**\r\n * Create a dictionary schema.\r\n *\r\n * This can be used to map/unmap a type like Record<string, something>.\r\n */\n\nfunction dict(itemSchema) {\n  var validate = function validate(validateFn, value, ctxt) {\n    if (typeof value !== 'object' || value === null) {\n      return ctxt.fail();\n    }\n\n    var valueObject = value;\n    return ctxt.flatmapChildren(objectEntries(valueObject), itemSchema, function (v, childCtxt) {\n      return itemSchema[validateFn](v[1], childCtxt);\n    });\n  };\n\n  return {\n    type: function type() {\n      return \"Record<string,\" + itemSchema.type() + \">\";\n    },\n    validateBeforeMap: function validateBeforeMap() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return validate.apply(void 0, __spreadArray(['validateBeforeMap'], __read(args)));\n    },\n    validateBeforeUnmap: function validateBeforeUnmap() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return validate.apply(void 0, __spreadArray(['validateBeforeUnmap'], __read(args)));\n    },\n    map: function map(value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.map(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    },\n    unmap: function unmap(value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.unmap(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    },\n    validateBeforeMapXml: function validateBeforeMapXml() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return validate.apply(void 0, __spreadArray(['validateBeforeMapXml'], __read(args)));\n    },\n    mapXml: function mapXml(value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.mapXml(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    },\n    unmapXml: function unmapXml(value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.unmapXml(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    }\n  };\n}\n\nexport { dict };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/schema/es/types/dict.js"],"names":["__spreadArray","__read","objectEntries","dict","itemSchema","validate","validateFn","value","ctxt","fail","valueObject","flatmapChildren","v","childCtxt","type","validateBeforeMap","args","_i","arguments","length","apply","validateBeforeUnmap","map","output","key","Object","prototype","hasOwnProperty","call","propValue","createChild","unmap","validateBeforeMapXml","mapXml","unmapXml"],"mappings":"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","sourcesContent":["import { __spreadArray, __read } from 'tslib';\nimport { objectEntries } from '../utils.js';\n/**\r\n * Create a dictionary schema.\r\n *\r\n * This can be used to map/unmap a type like Record<string, something>.\r\n */\n\nfunction dict(itemSchema) {\n  var validate = function (validateFn, value, ctxt) {\n    if (typeof value !== 'object' || value === null) {\n      return ctxt.fail();\n    }\n\n    var valueObject = value;\n    return ctxt.flatmapChildren(objectEntries(valueObject), itemSchema, function (v, childCtxt) {\n      return itemSchema[validateFn](v[1], childCtxt);\n    });\n  };\n\n  return {\n    type: function () {\n      return \"Record<string,\" + itemSchema.type() + \">\";\n    },\n    validateBeforeMap: function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return validate.apply(void 0, __spreadArray(['validateBeforeMap'], __read(args)));\n    },\n    validateBeforeUnmap: function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return validate.apply(void 0, __spreadArray(['validateBeforeUnmap'], __read(args)));\n    },\n    map: function (value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.map(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    },\n    unmap: function (value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.unmap(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    },\n    validateBeforeMapXml: function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return validate.apply(void 0, __spreadArray(['validateBeforeMapXml'], __read(args)));\n    },\n    mapXml: function (value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.mapXml(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    },\n    unmapXml: function (value, ctxt) {\n      var output = {};\n\n      for (var key in value) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var propValue = value[key];\n          output[key] = itemSchema.unmapXml(propValue, ctxt.createChild(key, propValue, itemSchema));\n        }\n      }\n\n      return output;\n    }\n  };\n}\n\nexport { dict };"]},"metadata":{},"sourceType":"module"}