{"ast":null,"code":"import warning from 'tiny-warning';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/**\r\n * Validates the protocol and removes duplicate forward slashes\r\n *\r\n * @param url URL to clean\r\n * @returns Sanitized URL\r\n */\n\nfunction sanitizeUrl(url) {\n  // ensure that the urls are absolute\n  var protocolRegex = /^https?:\\/\\/[^/]+/;\n  var match = url.match(protocolRegex);\n\n  if (match === null) {\n    throw new Error(\"Invalid URL format: \" + url);\n  } // remove redundant double-forward slashes\n\n\n  var protocol = match[0];\n  var queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, '/');\n  return protocol + queryUrl;\n}\n/**\r\n * Check whether value is an instance of Blob\r\n *\r\n * @remark\r\n * Reference: https://github.com/sindresorhus/is-blob/blob/master/index.js\r\n *\r\n * @param value Value to check\r\n * @returns True if the value is a Blob instance\r\n */\n\n\nfunction isBlob(value) {\n  if (typeof Blob === 'undefined') {\n    return false;\n  }\n\n  return value instanceof Blob || Object.prototype.toString.call(value) === '[object Blob]';\n} // This is used by deprecated() to keep track of \"hits\".\n\n\nvar deprecatedHits = {};\n/**\r\n * Create warning for deprecated method usage.\r\n *\r\n * This is called once per deprecated method. If this method is called again\r\n * with the same arguments, no warning is generated.\r\n *\r\n * @param methodName Method name for deprecated method\r\n * @param notice Optional message for deprecation\r\n */\n\nfunction deprecated(methodName, notice) {\n  var message = \"Method \" + methodName + \" is deprecated.\";\n\n  if (notice) {\n    message += \" \" + notice;\n  }\n\n  if (deprecatedHits[message]) {\n    return;\n  }\n\n  deprecatedHits[message] = true;\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(false, message);\n  }\n}\n\nexport { deprecated, isBlob, sanitizeUrl };","map":{"version":3,"sources":["/Users/rlew/Documents/fullstack/cafe_site/node_modules/@apimatic/core/es/apiHelper.js"],"names":["warning","sanitizeUrl","url","protocolRegex","match","Error","protocol","queryUrl","substring","length","replace","isBlob","value","Blob","Object","prototype","toString","call","deprecatedHits","deprecated","methodName","notice","message","process","env","NODE_ENV"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB;AACA,MAAIC,aAAa,GAAG,mBAApB;AACA,MAAIC,KAAK,GAAGF,GAAG,CAACE,KAAJ,CAAUD,aAAV,CAAZ;;AAEA,MAAIC,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,yBAAyBH,GAAnC,CAAN;AACD,GAPuB,CAOtB;;;AAGF,MAAII,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;AACA,MAAIG,QAAQ,GAAGL,GAAG,CAACM,SAAJ,CAAcF,QAAQ,CAACG,MAAvB,EAA+BC,OAA/B,CAAuC,QAAvC,EAAiD,GAAjD,CAAf;AACA,SAAOJ,QAAQ,GAAGC,QAAlB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASI,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO,KAAP;AACD;;AAED,SAAOD,KAAK,YAAYC,IAAjB,IAAyBC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,KAA/B,MAA0C,eAA1E;AACD,C,CAAC;;;AAGF,IAAIM,cAAc,GAAG,EAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,UAApB,EAAgCC,MAAhC,EAAwC;AACtC,MAAIC,OAAO,GAAG,YAAYF,UAAZ,GAAyB,iBAAvC;;AAEA,MAAIC,MAAJ,EAAY;AACVC,IAAAA,OAAO,IAAI,MAAMD,MAAjB;AACD;;AAED,MAAIH,cAAc,CAACI,OAAD,CAAlB,EAA6B;AAC3B;AACD;;AAEDJ,EAAAA,cAAc,CAACI,OAAD,CAAd,GAA0B,IAA1B;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCzB,IAAAA,OAAO,CAAC,KAAD,EAAQsB,OAAR,CAAP;AACD;AACF;;AAED,SAASH,UAAT,EAAqBR,MAArB,EAA6BV,WAA7B","sourcesContent":["import warning from 'tiny-warning';\n/**\r\n * bandwidthLib\r\n *\r\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\r\n */\n\n/**\r\n * Validates the protocol and removes duplicate forward slashes\r\n *\r\n * @param url URL to clean\r\n * @returns Sanitized URL\r\n */\n\nfunction sanitizeUrl(url) {\n  // ensure that the urls are absolute\n  var protocolRegex = /^https?:\\/\\/[^/]+/;\n  var match = url.match(protocolRegex);\n\n  if (match === null) {\n    throw new Error(\"Invalid URL format: \" + url);\n  } // remove redundant double-forward slashes\n\n\n  var protocol = match[0];\n  var queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, '/');\n  return protocol + queryUrl;\n}\n/**\r\n * Check whether value is an instance of Blob\r\n *\r\n * @remark\r\n * Reference: https://github.com/sindresorhus/is-blob/blob/master/index.js\r\n *\r\n * @param value Value to check\r\n * @returns True if the value is a Blob instance\r\n */\n\n\nfunction isBlob(value) {\n  if (typeof Blob === 'undefined') {\n    return false;\n  }\n\n  return value instanceof Blob || Object.prototype.toString.call(value) === '[object Blob]';\n} // This is used by deprecated() to keep track of \"hits\".\n\n\nvar deprecatedHits = {};\n/**\r\n * Create warning for deprecated method usage.\r\n *\r\n * This is called once per deprecated method. If this method is called again\r\n * with the same arguments, no warning is generated.\r\n *\r\n * @param methodName Method name for deprecated method\r\n * @param notice Optional message for deprecation\r\n */\n\nfunction deprecated(methodName, notice) {\n  var message = \"Method \" + methodName + \" is deprecated.\";\n\n  if (notice) {\n    message += \" \" + notice;\n  }\n\n  if (deprecatedHits[message]) {\n    return;\n  }\n\n  deprecatedHits[message] = true;\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(false, message);\n  }\n}\n\nexport { deprecated, isBlob, sanitizeUrl };"]},"metadata":{},"sourceType":"module"}